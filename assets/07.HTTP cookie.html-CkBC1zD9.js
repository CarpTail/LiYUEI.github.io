import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,b as a,o}from"./app-CgyEwi_p.js";const t={};function l(n,i){return o(),s("div",null,i[0]||(i[0]=[a(`<h1 id="http-cookie" tabindex="-1"><a class="header-anchor" href="#http-cookie"><span>HTTP cookie</span></a></h1><p>HTTP Cookie（也叫 Web Cookie 或浏览器 Cookie）是服务器发送到用户浏览器并保存在本地的一小块数据。 浏览器会存储 cookie 并在下次向同一服务器再发起请求时携带并发送到服务器上。 通常，它用于告知服务端两个请求是否来自同一浏览器——如保持用户的登录状态。 Cookie 使基于无状态的 HTTP 协议记录稳定的状态信息成为了可能。</p><p>Cookie 主要用于以下三个方面：</p><h5 id="会话状态管理" tabindex="-1"><a class="header-anchor" href="#会话状态管理"><span>会话状态管理</span></a></h5><p>  如用户登录状态、购物车、游戏分数或其他需要记录的信息</p><h4 id="个性化设置" tabindex="-1"><a class="header-anchor" href="#个性化设置"><span>个性化设置</span></a></h4><p>  如用户自定义设置、主题和其他设置</p><h4 id="浏览器行为跟踪" tabindex="-1"><a class="header-anchor" href="#浏览器行为跟踪"><span>浏览器行为跟踪</span></a></h4><p>  如跟踪分析用户行为等</p><p>Cookie 曾一度用于客户端数据的存储，因当时并没有其他合适的存储办法而作为唯一的存储手段， 但现在推荐使用现代存储 API。由于服务器指定 Cookie 后，浏览器的每次请求都会携带 Cookie 数据， 会带来额外的性能开销（尤其是在移动环境下）。新的浏览器 API 已经允许开发者直接将数据存储到本地， 如使用 Web storage API（localStorage 和 sessionStorage）或 IndexedDB 。</p><h2 id="创建-cookie" tabindex="-1"><a class="header-anchor" href="#创建-cookie"><span>创建 Cookie</span></a></h2><p>服务器收到 HTTP 请求后，服务器可以在响应标头里面添加一个或多个 Set-Cookie 选项。 浏览器收到响应后通常会保存下 Cookie，并将其放在 HTTP Cookie 标头内，向同一服务器发出请求时一起发送。 你可以指定一个过期日期或者时间段之后，不能发送 cookie。你也可以对指定的域和路径设置额外的限制， 以限制 cookie 发送的位置。关于下面提到的头部属性的详细信息。</p><h3 id="set-cookie-和-cookie-标头" tabindex="-1"><a class="header-anchor" href="#set-cookie-和-cookie-标头"><span>Set-Cookie 和 Cookie 标头</span></a></h3><p>服务器使用 Set-Cookie 响应头部向用户代理（一般是浏览器）发送 Cookie 信息。一个简单的 Cookie 可能像这样：</p><div class="language-http line-numbers-mode" data-highlighter="shiki" data-ext="http" data-title="http" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Set-Cookie</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;cookie-name&gt;=&lt;cookie-value&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这指示服务器发送标头告知客户端存储一对 cookie：</p><div class="language-http line-numbers-mode" data-highlighter="shiki" data-ext="http" data-title="http" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">HTTP/1.0 200 OK</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Content-type</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> text/html</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Set-Cookie</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> yummy_cookie=choco</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Set-Cookie</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> tasty_cookie=strawberry</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">页面内容</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，对该服务器发起的每一次新请求，浏览器都会将之前保存的 Cookie 信息通过 Cookie 请求头部再发送给服务器。</p><div class="language-http line-numbers-mode" data-highlighter="shiki" data-ext="http" data-title="http" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">GET</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /sample_page.html </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">HTTP</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1.1</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Host</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> www.example.org</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Cookie</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> yummy_cookie=choco; tasty_cookie=strawberry</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="定义-cookie-的生命周期" tabindex="-1"><a class="header-anchor" href="#定义-cookie-的生命周期"><span>定义 Cookie 的生命周期</span></a></h3><p>Cookie 的生命周期可以通过两种方式定义：</p><ul><li>会话期 Cookie 会在当前的会话结束之后删除。浏览器定义了“当前会话”结束的时间， 一些浏览器重启时会使用会话恢复。这可能导致会话 cookie 无限延长。</li><li>持久性 Cookie 在过期时间（Expires）指定的日期或有效期（Max-Age）指定的一段时间后被删除。</li></ul><div class="language-http line-numbers-mode" data-highlighter="shiki" data-ext="http" data-title="http" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Set-Cookie</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果你的站点对用户进行身份验证，则每当用户进行身份验证时，它都应重新生成并重新发送会话 Cookie， 甚至是已经存在的会话 Cookie。此技术有助于防止会话固定攻击（session fixation attacks）， 在该攻击中第三方可以重用用户的会话。</p><h3 id="限制访问-cookie" tabindex="-1"><a class="header-anchor" href="#限制访问-cookie"><span>限制访问 Cookie</span></a></h3><p>有两种方法可以确保 Cookie 被安全发送，并且不会被意外的参与者或脚本访问：Secure 属性和 HttpOnly 属性。</p><p>标记为 Secure 的 Cookie 只应通过被 HTTPS 协议加密过的请求发送给服务端。 它永远不会使用不安全的 HTTP 发送（本地主机除外），这意味着中间人攻击者无法轻松访问它。 不安全的站点（在 URL 中带有 http:）无法使用 Secure 属性设置 cookie。 但是，Secure 不会阻止对 cookie 中敏感信息的访问。例如， 有权访问客户端硬盘（或，如果未设置 HttpOnly 属性，则为 JavaScript）的人可以读取和修改它。</p><p>JavaScript Document.cookie API 无法访问带有 HttpOnly 属性的 cookie； 此类 Cookie 仅作用于服务器。例如，持久化服务器端会话的 Cookie 不需要对 JavaScript 可用， 而应具有 HttpOnly 属性。此预防措施有助于缓解跨站点脚本（XSS）攻击。</p><div class="language-http line-numbers-mode" data-highlighter="shiki" data-ext="http" data-title="http" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Set-Cookie</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT; Secure; HttpOnly</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="定义-cookie-发送的位置" tabindex="-1"><a class="header-anchor" href="#定义-cookie-发送的位置"><span>定义 Cookie 发送的位置</span></a></h3><p>Domain 和 Path 标识定义了 Cookie 的作用域：即允许 Cookie 应该发送给哪些 URL。</p><h4 id="domain属性" tabindex="-1"><a class="header-anchor" href="#domain属性"><span>Domain属性</span></a></h4><p>Domain 指定了哪些主机可以接受 Cookie。如果不指定，该属性默认为同一 host 设置 cookie， 不包含子域名。如果指定了 Domain，则一般包含子域名。因此，指定 Domain 比省略它的限制要少。 但是，当子域需要共享有关用户的信息时，这可能会有所帮助。</p><p>例如，如果设置 Domain=mozilla.org，则 Cookie 也包含在子域名中（如 developer.mozilla.org）。</p><h4 id="path属性" tabindex="-1"><a class="header-anchor" href="#path属性"><span>Path属性</span></a></h4><p>Path 属性指定了一个 URL 路径，该 URL 路径必须存在于请求的 URL 中，以便发送 Cookie 标头。 以字符 %x2F (“/”) 作为路径分隔符，并且子路径也会被匹配。</p><p>例如，设置 Path=/docs，则以下地址都会匹配：</p><ul><li>/docs</li><li>/docs/</li><li>/docs/Web/</li><li>/docs/Web/HTTP</li></ul><p>但是这些请求路径不会匹配以下地址：</p><ul><li>/</li><li>/docsets</li><li>/fr/docs</li></ul><h4 id="samesite-属性" tabindex="-1"><a class="header-anchor" href="#samesite-属性"><span>SameSite 属性</span></a></h4><p>SameSite 属性允许服务器指定是否/何时通过跨站点请求发送（其中站点由注册的域和方案定义：http 或 https）。 这提供了一些针对跨站点请求伪造攻击（CSRF）的保护。它采用三个可能的值：Strict、Lax 和 None。</p><p>使用 Strict，cookie 仅发送到它来源的站点。Lax 与 Strict 相似，只是在用户导航到 cookie 的源站点时发送 cookie。例如，通过跟踪来自外部站点的链接。None 指定浏览器会在同站请求和跨 站请求下继续发送 cookie，但仅在安全的上下文中（即，如果 SameSite=None，且还必须设置 Secure 属性）。 如果没有设置 SameSite 属性，则将 cookie 视为 Lax。</p><div class="language-http line-numbers-mode" data-highlighter="shiki" data-ext="http" data-title="http" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Set-Cookie</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> mykey=myvalue; SameSite=Strict</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="cookie-前缀" tabindex="-1"><a class="header-anchor" href="#cookie-前缀"><span>Cookie 前缀</span></a></h3><p>cookie 的机制使得服务器无法确认 cookie 是在安全来源上设置的，甚至无法确定 cookie 最初是在哪里设置的。</p><p>子域上的易受攻击的应用程序可以使用 Domain 属性设置 cookie，从而可以访问所有其他子域上的该 cookie。 会话劫持攻击中可能会滥用此机制。</p><p>但是，作为深度防御措施，可以使用 cookie 前缀来断言有关 cookie 的特定事实。有两个前缀可用：</p><h4 id="host" tabindex="-1"><a class="header-anchor" href="#host"><span><code>__Host-</code></span></a></h4><p>如果 cookie 名称具有此前缀，则仅当它也用 Secure 属性标记、从安全来源发送、 不包括 Domain 属性，并将 Path 属性设置为 / 时，它才在 Set-Cookie 标头中接受。 这样，这些 cookie 可以被视为“domain-locked”。</p><h4 id="secure" tabindex="-1"><a class="header-anchor" href="#secure"><span><code>__Secure-</code></span></a></h4><p>如果 cookie 名称具有此前缀，则仅当它也用 Secure 属性标记，是从安全来源发送的， 它才在 Set-Cookie 标头中接受。该前缀限制要弱于 __Host- 前缀。</p><p>带有这些前缀的 Cookie，如果不符合其限制的会被浏览器拒绝。请注意，这确保了如果子域要创建带有前缀的 cookie， 那么它将要么局限于该子域，要么被完全忽略。由于应用服务器仅在确定用户是否已通过身份验证或 CSRF 令牌正确时才检查特定的 cookie 名称，因此，这有效地充当了针对会话劫持的防御措施。</p><h3 id="javascript-通过-document-cookie-访问-cookie" tabindex="-1"><a class="header-anchor" href="#javascript-通过-document-cookie-访问-cookie"><span>JavaScript 通过 Document.cookie 访问 Cookie</span></a></h3><p>通过 Document.cookie 属性可创建新的 Cookie。如果未设置 HttpOnly 标记， 你也可以从 JavaScript 访问现有的 Cookie。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cookie</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;yummy_cookie=choco&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cookie</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;tasty_cookie=strawberry&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cookie</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// logs &quot;yummy_cookie=choco; tasty_cookie=strawberry&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 JavaScript 创建的 Cookie 不能包含 HttpOnly 标志。</p><h2 id="安全" tabindex="-1"><a class="header-anchor" href="#安全"><span>安全</span></a></h2><p>缓解涉及 Cookie 的攻击的方法：</p><ul><li>使用 HttpOnly 属性可防止通过 JavaScript 访问 cookie 值</li><li>用于敏感信息（例如指示身份验证）的 Cookie 的生存期应较短， 并且 SameSite 属性设置为 Strict 或 Lax。（请参见上方的 SameSite 属性。） 在支持 SameSite 的浏览器中，这样做的作用是确保不与跨站点请求一起发送身份验证 cookie。 因此，这种请求实际上不会向应用服务器进行身份验证。</li></ul><h2 id="跟踪和隐私" tabindex="-1"><a class="header-anchor" href="#跟踪和隐私"><span>跟踪和隐私</span></a></h2><h3 id="第三方-cookie" tabindex="-1"><a class="header-anchor" href="#第三方-cookie"><span>第三方 Cookie</span></a></h3><p>Cookie 与特定域和方案（例如，http 或 https）相关联，如果设置了 Set-Cookie Domain 属性， 也可能与子域相关联。如果该 cookie 域和方案匹配当前的页面，则认为该 cookie 和该页面来自同一站点， 则称为第一方 cookie（first-party cookie）。</p><p>如果域和方案不同，则它不认为来自同一个站点，被称为第三方 cookie（third-party cookie）。 虽然托管网页的服务器设置第一方 Cookie 时，但该页面可能包含存储在其他域中的服务器上的图像或其他组件 （例如，广告横幅），这些图像或其他组件可能会设置第三方 Cookie。 这些主要用于在网络上进行广告和跟踪。例如， <a href="https://policies.google.com/technologies/cookies#types-of-cookies" target="_blank" rel="noopener noreferrer">谷歌使用的 cookie 类型</a>。</p><p>第三方服务器可以基于同一浏览器在访问多个站点时发送给它的 cookie 来建立用户浏览历史和习惯的配置文件。 Firefox 默认情况下会阻止已知包含跟踪器的第三方 cookie。 第三方 cookie（或仅跟踪 cookie）也可能被其他浏览器设置或扩展程序阻止。 阻止 Cookie 会导致某些第三方组件（例如社交媒体窗口小部件）无法正常运行。</p><h3 id="cookie-相关规定" tabindex="-1"><a class="header-anchor" href="#cookie-相关规定"><span>Cookie 相关规定</span></a></h3><p>涉及使用 Cookie 的法律或法规包括：</p><ul><li>欧盟通用数据隐私法规（GDPR）</li><li>欧盟的电子隐私权指令</li><li>加州消费者隐私法</li></ul><p>这些规定具有全球影响力。它们适用于这些司法管辖区的用户访问的万维网上的任何站点 （欧盟和加利福尼亚，但请注意，加利福尼亚州的法律仅适用于总收入超过 2500 万美元的实体）。</p><p>这些法规包括以下要求：</p><ul><li>向用户表明你的站点使用 cookie。</li><li>允许用户选择不接收某些或所有 cookie。</li><li>允许用户在不接收 Cookie 的情况下使用大部分服务。</li></ul><p>可能还存在其他法规来管理你当地的 Cookie。你有责任了解并遵守这些规定。 有些公司提供“cookie banner”代码，可帮助你遵守这些法规。</p><h2 id="在浏览器中存储信息的其他方式" tabindex="-1"><a class="header-anchor" href="#在浏览器中存储信息的其他方式"><span>在浏览器中存储信息的其他方式</span></a></h2><p>在浏览器中存储数据的另一种方法是 Web Storage API。window.sessionStorage 和 window.localStorage 属性与持续时间中的会话和永久 cookie 相对应，但是存储限制比 cookie 大，并且永远不会发送到服务器。 可以使用 IndexedDB API 或基于它构建的库来存储更多结构化的数据。</p><p>有一些技术旨在在 cookie 被删除后重新创建它们。这些被称为“僵尸”cookie。 这些技术违反了用户的隐私和用户控制原则，可能违反数据隐私法规，并可能使使用它们的网站承担法律责任。</p><ul><li>localForage：一个简单的 Polyfill，提供了简单的客户端数据存储的值语法。 它在后台使用 IndexedDB，并在不支持 IndexedDB 的浏览器中回退到 WebSQL 或 localStorage。</li><li>Dexie.js：IndexedDB 的包装，通过简单的语法，可以更快地进行代码开发。</li><li>ZangoDB：类似 MongoDB 的 IndexedDB 接口，支持 MongoDB 的大多数熟悉的过滤、投影、排序、更新和聚合功能。</li><li>JsStore：一个带有 SQL 语法的 IndexedDB 包装器。</li><li>MiniMongo：由 localstorage 支持的客户端内存中的 mongodb，通过 http 进行服务器同步。 MeteorJS 使用 MiniMongo。</li><li>PouchDB：使用 IndexedDB 在浏览器中实现 CouchDB 的客户端。</li><li>idb：一个微小的（〜1.15k）库，大多 API 与 IndexedDB 类似，但做了一些小的改进， 让数据库的可用性得到了大大的提升。</li><li>idb-keyval：使用 IndexedDB 实现的超级简单且小巧的（~600B）基于 Promise 的键值对存储。</li><li>sifrr-storage：一个非常小的（~2kB）基于 Promise 的客户端键值数据库。基于 IndexedDB、localStorage、WebSQL 和 Cookies 实现。它可以自动选择上述支持的数据库，并按照优先顺序使用。</li><li>lovefield：Lovefield 是一个用于 Web App 的关系型数据库，使用 JavaScript 编写， 可以在不同的浏览器环境中运行，提供了类似 SQL 的 API，速度快、安全且易用。</li></ul><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies" target="_blank" rel="noopener noreferrer">MDN Web Docs 社区</a></p>`,78)]))}const p=e(t,[["render",l],["__file","07.HTTP cookie.html.vue"]]),r=JSON.parse('{"path":"/05.Web%E6%8A%80%E6%9C%AF/HTTP/03.HTTP%E8%BF%9B%E9%98%B6/07.HTTP%20cookie.html","title":"HTTP cookie","lang":"zh-CN","frontmatter":{"title":"HTTP cookie","date":"2024-08-20T00:00:00.000Z","order":7,"category":["计算机网络"],"tag":["HTTP"],"description":"HTTP cookie HTTP Cookie（也叫 Web Cookie 或浏览器 Cookie）是服务器发送到用户浏览器并保存在本地的一小块数据。 浏览器会存储 cookie 并在下次向同一服务器再发起请求时携带并发送到服务器上。 通常，它用于告知服务端两个请求是否来自同一浏览器——如保持用户的登录状态。 Cookie 使基于无状态的 HTTP 协...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/05.Web%E6%8A%80%E6%9C%AF/HTTP/03.HTTP%E8%BF%9B%E9%98%B6/07.HTTP%20cookie.html"}],["meta",{"property":"og:site_name","content":"Mr.Li"}],["meta",{"property":"og:title","content":"HTTP cookie"}],["meta",{"property":"og:description","content":"HTTP cookie HTTP Cookie（也叫 Web Cookie 或浏览器 Cookie）是服务器发送到用户浏览器并保存在本地的一小块数据。 浏览器会存储 cookie 并在下次向同一服务器再发起请求时携带并发送到服务器上。 通常，它用于告知服务端两个请求是否来自同一浏览器——如保持用户的登录状态。 Cookie 使基于无状态的 HTTP 协..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-30T13:53:16.000Z"}],["meta",{"property":"article:author","content":"Mr.Li"}],["meta",{"property":"article:tag","content":"HTTP"}],["meta",{"property":"article:published_time","content":"2024-08-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-30T13:53:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"HTTP cookie\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-08-20T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-30T13:53:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Li\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"创建 Cookie","slug":"创建-cookie","link":"#创建-cookie","children":[{"level":3,"title":"Set-Cookie 和 Cookie 标头","slug":"set-cookie-和-cookie-标头","link":"#set-cookie-和-cookie-标头","children":[]},{"level":3,"title":"定义 Cookie 的生命周期","slug":"定义-cookie-的生命周期","link":"#定义-cookie-的生命周期","children":[]},{"level":3,"title":"限制访问 Cookie","slug":"限制访问-cookie","link":"#限制访问-cookie","children":[]},{"level":3,"title":"定义 Cookie 发送的位置","slug":"定义-cookie-发送的位置","link":"#定义-cookie-发送的位置","children":[]},{"level":3,"title":"Cookie 前缀","slug":"cookie-前缀","link":"#cookie-前缀","children":[]},{"level":3,"title":"JavaScript 通过 Document.cookie 访问 Cookie","slug":"javascript-通过-document-cookie-访问-cookie","link":"#javascript-通过-document-cookie-访问-cookie","children":[]}]},{"level":2,"title":"安全","slug":"安全","link":"#安全","children":[]},{"level":2,"title":"跟踪和隐私","slug":"跟踪和隐私","link":"#跟踪和隐私","children":[{"level":3,"title":"第三方 Cookie","slug":"第三方-cookie","link":"#第三方-cookie","children":[]},{"level":3,"title":"Cookie 相关规定","slug":"cookie-相关规定","link":"#cookie-相关规定","children":[]}]},{"level":2,"title":"在浏览器中存储信息的其他方式","slug":"在浏览器中存储信息的其他方式","link":"#在浏览器中存储信息的其他方式","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1724743264000,"updatedTime":1732974796000,"contributors":[{"name":"lyw","email":"806555632@qq.com","commits":2}]},"readingTime":{"minutes":10.71,"words":3214},"filePathRelative":"05.Web技术/HTTP/03.HTTP进阶/07.HTTP cookie.md","localizedDate":"2024年8月20日","excerpt":"\\n<p>HTTP Cookie（也叫 Web Cookie 或浏览器 Cookie）是服务器发送到用户浏览器并保存在本地的一小块数据。\\n浏览器会存储 cookie 并在下次向同一服务器再发起请求时携带并发送到服务器上。\\n通常，它用于告知服务端两个请求是否来自同一浏览器——如保持用户的登录状态。\\nCookie 使基于无状态的 HTTP 协议记录稳定的状态信息成为了可能。</p>\\n<p>Cookie 主要用于以下三个方面：</p>\\n<h5>会话状态管理</h5>\\n<p> \\n如用户登录状态、购物车、游戏分数或其他需要记录的信息</p>\\n<h4>个性化设置</h4>\\n<p> \\n如用户自定义设置、主题和其他设置</p>","autoDesc":true}');export{p as comp,r as data};
