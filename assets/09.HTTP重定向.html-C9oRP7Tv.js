import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,o as a,b as s}from"./app-DzPe9QHO.js";const t="/assets/images/httpredirect.svg",l={},n=s('<h1 id="http重定向" tabindex="-1"><a class="header-anchor" href="#http重定向"><span>HTTP重定向</span></a></h1><p>URL 重定向（也称为 URL 转发）是一种为页面、表单或者整个 Web 站点/应用提供多个 URL 地址的技术。 HTTP 对此操作有一种特殊类型的响应，称为 HTTP 重定向（HTTP redirect）。</p><p>重定向可实现许多目标：</p><ul><li>站点维护或停机期间的临时重定向。</li><li>永久重定向将在更改站点的 URL 后，保留现有的链接/书签、上传文件时表示进度的页面等。</li></ul><h2 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h2><p>在 HTTP 协议中，重定向操作由服务器向请求发送特殊的重定向响应而触发。 重定向响应包含以 3 开头的状态码，以及 Location 标头，其保存着重定向的 URL。</p><p>浏览器在接收到重定向时，它们会立刻加载 Location 标头中提供的新 URL。 除了额外的往返操作中会有一小部分性能损失之外，重定向操作对于用户来说是不可见的。</p><figure><img src="'+t+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>不同类型的重定向映射可以划分为三个类别：</p><ul><li>永久重定向</li><li>临时重定向</li><li>特殊重定向</li></ul><h3 id="永久重定向" tabindex="-1"><a class="header-anchor" href="#永久重定向"><span>永久重定向</span></a></h3><p>这种重定向操作是永久性的。它表示原 URL 不应再被使用，而选用新的 URL 替换它。 搜索引擎机器人、RSS 阅读器以及其他爬虫将更新资源原始的 URL。</p><ul><li>301 Moved Permanently ：GET 方法不会发生变更。其他方法有可能会变更为 GET 方法。多用于<code>网站重构</code>。</li><li>308 Permanent Redirect ：方法和消息主体都不发生变化。使用用于非 GET 链接/操作重组网站。</li></ul><h3 id="临时重定向" tabindex="-1"><a class="header-anchor" href="#临时重定向"><span>临时重定向</span></a></h3><p>有时候请求的资源无法从其标准地址访问，但是却可以从另外的地方访问。在这种情况下，可以使用临时重定向。</p><p>搜索引擎和其他爬虫不会记录新的、临时的 URL。在创建、更新或者删除资源的时候，临时重定向也可以用于显示临时性的进度页面。</p><ul><li>302 Found : GET 方法不会发生变更。其他方法有可能会变更为 GET 方法。 由于不可预见的原因该页面暂不可用。</li><li>303 See Other : GET 方法不会发生变更，其他方法会变更为 GET 方法（消息主体丢失）。 用于 PUT 或 POST 请求完成之后重定向，来防止由于页面刷新导致的操作的重复触发。</li><li>307 Temporary Redirect : 方法和消息主体都不发生变化。由于不可预见的原因该页面暂不可用。 当站点支持非 GET 方法的链接或操作的时候，该状态码优于 302 状态码。</li></ul><h3 id="特殊重定向" tabindex="-1"><a class="header-anchor" href="#特殊重定向"><span>特殊重定向</span></a></h3><p>304（Not Modified）会使页面跳转到本地的缓存副本中（可能已过时），而 300（Multiple Choice） 则是一种手动重定向：将消息主体以 Web 页面形式呈现在浏览器中，列出了可能的重定向链接，用户可以从中进行选择。</p><ul><li>300 Multiple Choice : 不常用：所有的选项在消息主体的 HTML 页面中列出。 鼓励在 Link 标头中加入机器可读的 rel=alternate</li><li>304 Not Modified : 发送用于重新验证的条件请求。表示缓存的响应仍然是新的并且可以使用。</li></ul><h2 id="指定重定向的其他方式" tabindex="-1"><a class="header-anchor" href="#指定重定向的其他方式"><span>指定重定向的其他方式</span></a></h2><p>HTTP 重定向不是定义重定向的唯一方法。还有两个：</p><ol><li>借助 HTML 的 <code>&lt;meta&gt;</code> 元素的 HTML 重定向机制</li><li>借助 DOM 的 JavaScript 重定向机制。</li></ol><h3 id="html-重定向机制" tabindex="-1"><a class="header-anchor" href="#html-重定向机制"><span>HTML 重定向机制</span></a></h3><p>HTTP 重定向是创建重定向的最佳方式，但是有时候你并不能控制服务器。针对这些特定的应用情景， 可以尝试在页面的 <code>&lt;head&gt;</code> 中添加一个 <code>&lt;meta&gt;</code> 元素，并将其 http-equiv 属性的值设置为 refresh。 当显示页面的时候，浏览器会检测该元素，然后跳转到指定的页面。</p><div class="language-http line-numbers-mode" data-highlighter="shiki" data-ext="http" data-title="http" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">head</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">meta</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> http-equiv</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Refresh&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> content</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;0; URL=http://example.com/&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">head</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>content 属性的值开头是一个数字，指示浏览器在等待该数字表示的秒数之后再进行跳转。 建议始终将其设置为 0 来获取更好的无障碍体验。</p><p>显然，该方法仅适用于 HTML 页面（或类似的页面），然而并不能应用于图片或者其他类型的内容。</p><h3 id="javascript-重定向机制" tabindex="-1"><a class="header-anchor" href="#javascript-重定向机制"><span>JavaScript 重定向机制</span></a></h3><p>在 JavaScript 中，重定向机制的原理是设置 window.location 的属性值，然后加载新的页面。</p><div class="language-http line-numbers-mode" data-highlighter="shiki" data-ext="http" data-title="http" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">window.location = &quot;https://example.com/&quot;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>与 HTML 重定向机制类似，这种方式并不适用于所有类型的资源，并且显然只有在执行 JavaScript 的客户端上才能使用。另外一方面，它也提供了更多的可能性：比如在只有满足了特定的条件的情况下 才可以触发重定向机制的场景。</p><h3 id="优先级" tabindex="-1"><a class="header-anchor" href="#优先级"><span>优先级</span></a></h3><p>由于存在上述三种 URL 重定向机制，那么在多种方法同时设定的情况下，哪种方法会首先起作用呢？</p><ol><li>HTTP 协议的重定向机制永远最先触发——它们甚至在没有传输页面的情况下就已经存在。</li><li>HTML 的重定向机制 (<code>&lt;meta&gt;</code>) 会在没有任何 HTTP 协议重定向的情况下触发。</li><li>JavaScript 的重定向机制总是作为最后诉诸的手段，并且只有在客户端开启了 JavaScript 的情况下才起作用。</li></ol><p>如果可能，请采用 HTTP 协议的重定向机制，而不要使用 <code>&lt;meta&gt;</code> 元素重定向。假如开发人员修改了 HTTP 重定向， 而忘记修改 HTML 页面的重定向，那么二者就会不一致，最终结果或者出现无限循环，或者导致其他噩梦的发生。</p><h2 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span>应用场景</span></a></h2><p>有以下几种应用场景可以使用重定向机制，但是需要注意应该尽可能地限制其使用数量， 因为每一次重定向都会带来性能上的开销。</p><h3 id="域名别称" tabindex="-1"><a class="header-anchor" href="#域名别称"><span>域名别称</span></a></h3><p>理想情况下，一项资源只有一个访问位置，也就是只有一个 URL。但是由于种种原因，需要为资源设定不同的名称：</p><ul><li>扩大站点的用户覆盖面 <blockquote><p>一个常见的场景是，假如站点位于 www.example.com 域名下，那么通过 example.com 也应该可以访问到。 这种情况下，可以建立从 example.com 的页面到 www.example.com 的重定向。 此外还可以提供你域名常见的同义词，或者该域名容易导致的拼写错误的别称来重定向到你的网站。</p></blockquote></li><li>迁移到新的域名 <blockquote><p>例如，公司改名后，你希望用户在搜索旧名称的时候，依然可以访问到应用了新名称的站点。</p></blockquote></li><li>强制使用 HTTPS <blockquote><p>对你网站的 http:// 版本的请求将重定向到你网站的 https:// 版本。</p></blockquote></li></ul><h3 id="保持链接有效" tabindex="-1"><a class="header-anchor" href="#保持链接有效"><span>保持链接有效</span></a></h3><p>当你重构 Web 站点的时候，资源的 URL 会发生改变。即便是你更新站点内部的链接来匹配新的 URL， 也无法控制被外部资源使用的 URL。</p><p>你并不想因此而使旧链接失效，因为它们会为你带来宝贵的用户并且帮助优化你的 SEO， 所以需要建立从旧链接到新链接的重定向映射。</p><h3 id="对于不安全请求的临时响应" tabindex="-1"><a class="header-anchor" href="#对于不安全请求的临时响应"><span>对于不安全请求的临时响应</span></a></h3><p>不安全的请求会修改服务器端的状态，应该避免用户无意的重复发送它们。</p><p>通常，你并不想要你的用户重复发送 PUT、POST 或 DELETE 请求。 假如你为该类请求返回响应的话，简单地点击刷新按钮就会导致请求的重复发送（可能在确认消息之后）。</p><p>在这种情况下，服务器可以为 URL 发回一个 303（See Other）响应，其中含有正确的响应信息。 如果刷新按钮被点击的话，只会导致该页面被刷新，而不会重复提交不安全的请求。</p><h3 id="对于耗时请求的临时响应" tabindex="-1"><a class="header-anchor" href="#对于耗时请求的临时响应"><span>对于耗时请求的临时响应</span></a></h3><p>一些请求的处理会需要比较长的时间，比如有时候 DELETE 请求会被安排为稍后处理。 在这种情况下，会返回一个 303（See Other）重定向响应，该响应链接到一个页面， 表示请求的操作已经被列入计划，并且最终会通知用户操作的进展情况，或者允许用户将其取消。</p><h2 id="在通用服务器中配置重定向" tabindex="-1"><a class="header-anchor" href="#在通用服务器中配置重定向"><span>在通用服务器中配置重定向</span></a></h2><h3 id="apache" tabindex="-1"><a class="header-anchor" href="#apache"><span>Apache</span></a></h3><p>重定向可以在服务器的配置文件中设置，也可以在每一个文件目录的 .htaccess 文件中设置。</p><p>mod_alias 模块提供了 Redirect 和 Redirect_Match 两种指令来设置 302 响应（默认值）：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;VirtualHost *:443&gt;</span></span>
<span class="line"><span>  ServerName example.com</span></span>
<span class="line"><span>  Redirect / https://www.example.com</span></span>
<span class="line"><span>&lt;/VirtualHost&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>URL https://example.com/ 会被重定向至 https://www.example.com/，URL 下的任何文件或目录 也将重定向到该 URL（https://example.com/some-page 将重定向至 https://www.example.com/some-page）。</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>RedirectMatch ^/images/(.*)$ https://images.example.com/$1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>位于 images/ 文件夹下的所有文档都会被重定向至新的域名。</p><p>如果你不想要临时重定向，可以使用额外参数（要么使用的 HTTP 状态代码， 要么设置 permanetn 关键字）来设置不同的重定向：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Redirect permanent / https://www.example.com</span></span>
<span class="line"><span># …acts the same as:</span></span>
<span class="line"><span>Redirect 301 / https://www.example.com</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>mod_rewrite 模块也可以用来设置重定向。它应用起来更灵活，但也更加复杂。</p><h3 id="nginx" tabindex="-1"><a class="header-anchor" href="#nginx"><span>Nginx</span></a></h3><p>在 Nginx 中，你可以创建一个服务器模块来进行重定向设置：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>server {</span></span>
<span class="line"><span>  listen 80;</span></span>
<span class="line"><span>  server_name example.com;</span></span>
<span class="line"><span>  return 301 $scheme://www.example.com$request_uri;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要将重定向应用于目录或者仅是部分页面，请使用 rewrite 指令：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>rewrite ^/images/(.*)$ https://images.example.com/$1 redirect;</span></span>
<span class="line"><span>rewrite ^/images/(.*)$ https://images.example.com/$1 permanent;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="重定向死锁-循环" tabindex="-1"><a class="header-anchor" href="#重定向死锁-循环"><span>重定向死锁（循环）</span></a></h2><p>当后续的重定向路径重复之前的路径的时候，重定向循环就产生了。 换句话说，就是陷入了无限循环当中，不会有一个最终的页面返回。</p><p>大多数情况下，这属于服务器端错误。如果服务器检测不到，就会返回 500 Internal Server Error。 假如你在修改了服务器配置不久就出现了这个问题，八成是遇到了重定向循环。</p><p>有时候，服务器端无法对其进行检测：重定向循环发生于多台服务器之间，对于每一台服务器来说， 都无法获得一个全景图。在这种情况下，浏览器会负责进行检测，然后返回错误信息。 Firefox 会呈现如下信息：</p><blockquote><p>Firefox 检测到该服务器正在将指向此网址的请求无限循环重定向。</p></blockquote><p>而 Chrome 则会呈现如下信息：</p><blockquote><p>该网页将你重定向的次数过多。</p></blockquote><p>无论哪个场景，用户对此都无能为力（除非客户端发生突变，比如说缓存或者 Cookie 不匹配）。</p><p>避免重定向循环非常重要，因为它会完全毁掉用户的体验。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Redirections" target="_blank" rel="noopener noreferrer">MDN Web Docs 社区</a></p>`,77),p=[n];function r(h,d){return a(),i("div",null,p)}const m=e(l,[["render",r],["__file","09.HTTP重定向.html.vue"]]),g=JSON.parse('{"path":"/05.Web%E6%8A%80%E6%9C%AF/HTTP/03.HTTP%E8%BF%9B%E9%98%B6/09.HTTP%E9%87%8D%E5%AE%9A%E5%90%91.html","title":"HTTP重定向","lang":"zh-CN","frontmatter":{"title":"HTTP重定向","icon":"laptop-code","date":"2024-08-20T00:00:00.000Z","order":9,"category":["计算机网络"],"tag":["HTTP"],"description":"HTTP重定向 URL 重定向（也称为 URL 转发）是一种为页面、表单或者整个 Web 站点/应用提供多个 URL 地址的技术。 HTTP 对此操作有一种特殊类型的响应，称为 HTTP 重定向（HTTP redirect）。 重定向可实现许多目标： 站点维护或停机期间的临时重定向。 永久重定向将在更改站点的 URL 后，保留现有的链接/书签、上传文件...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/05.Web%E6%8A%80%E6%9C%AF/HTTP/03.HTTP%E8%BF%9B%E9%98%B6/09.HTTP%E9%87%8D%E5%AE%9A%E5%90%91.html"}],["meta",{"property":"og:site_name","content":"Mr.Li"}],["meta",{"property":"og:title","content":"HTTP重定向"}],["meta",{"property":"og:description","content":"HTTP重定向 URL 重定向（也称为 URL 转发）是一种为页面、表单或者整个 Web 站点/应用提供多个 URL 地址的技术。 HTTP 对此操作有一种特殊类型的响应，称为 HTTP 重定向（HTTP redirect）。 重定向可实现许多目标： 站点维护或停机期间的临时重定向。 永久重定向将在更改站点的 URL 后，保留现有的链接/书签、上传文件..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/assets/images/httpredirect.svg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-27T07:21:04.000Z"}],["meta",{"property":"article:author","content":"Mr.Li"}],["meta",{"property":"article:tag","content":"HTTP"}],["meta",{"property":"article:published_time","content":"2024-08-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-27T07:21:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"HTTP重定向\\",\\"image\\":[\\"https://mister-hope.github.io/assets/images/httpredirect.svg\\"],\\"datePublished\\":\\"2024-08-20T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-27T07:21:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Li\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"原理","slug":"原理","link":"#原理","children":[{"level":3,"title":"永久重定向","slug":"永久重定向","link":"#永久重定向","children":[]},{"level":3,"title":"临时重定向","slug":"临时重定向","link":"#临时重定向","children":[]},{"level":3,"title":"特殊重定向","slug":"特殊重定向","link":"#特殊重定向","children":[]}]},{"level":2,"title":"指定重定向的其他方式","slug":"指定重定向的其他方式","link":"#指定重定向的其他方式","children":[{"level":3,"title":"HTML 重定向机制","slug":"html-重定向机制","link":"#html-重定向机制","children":[]},{"level":3,"title":"JavaScript 重定向机制","slug":"javascript-重定向机制","link":"#javascript-重定向机制","children":[]},{"level":3,"title":"优先级","slug":"优先级","link":"#优先级","children":[]}]},{"level":2,"title":"应用场景","slug":"应用场景","link":"#应用场景","children":[{"level":3,"title":"域名别称","slug":"域名别称","link":"#域名别称","children":[]},{"level":3,"title":"保持链接有效","slug":"保持链接有效","link":"#保持链接有效","children":[]},{"level":3,"title":"对于不安全请求的临时响应","slug":"对于不安全请求的临时响应","link":"#对于不安全请求的临时响应","children":[]},{"level":3,"title":"对于耗时请求的临时响应","slug":"对于耗时请求的临时响应","link":"#对于耗时请求的临时响应","children":[]}]},{"level":2,"title":"在通用服务器中配置重定向","slug":"在通用服务器中配置重定向","link":"#在通用服务器中配置重定向","children":[{"level":3,"title":"Apache","slug":"apache","link":"#apache","children":[]},{"level":3,"title":"Nginx","slug":"nginx","link":"#nginx","children":[]}]},{"level":2,"title":"重定向死锁（循环）","slug":"重定向死锁-循环","link":"#重定向死锁-循环","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1724743264000,"updatedTime":1724743264000,"contributors":[{"name":"lyw","email":"806555632@qq.com","commits":1}]},"readingTime":{"minutes":9.36,"words":2807},"filePathRelative":"05.Web技术/HTTP/03.HTTP进阶/09.HTTP重定向.md","localizedDate":"2024年8月20日","excerpt":"\\n<p>URL 重定向（也称为 URL 转发）是一种为页面、表单或者整个 Web 站点/应用提供多个 URL 地址的技术。\\nHTTP 对此操作有一种特殊类型的响应，称为 HTTP 重定向（HTTP redirect）。</p>\\n<p>重定向可实现许多目标：</p>\\n<ul>\\n<li>站点维护或停机期间的临时重定向。</li>\\n<li>永久重定向将在更改站点的 URL 后，保留现有的链接/书签、上传文件时表示进度的页面等。</li>\\n</ul>\\n<h2>原理</h2>\\n<p>在 HTTP 协议中，重定向操作由服务器向请求发送特殊的重定向响应而触发。\\n重定向响应包含以 3 开头的状态码，以及 Location 标头，其保存着重定向的 URL。</p>","autoDesc":true}');export{m as comp,g as data};
