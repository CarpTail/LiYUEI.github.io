import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,b as t,o as n}from"./app-CgyEwi_p.js";const r={};function i(s,e){return n(),l("div",null,e[0]||(e[0]=[t('<h1 id="c-11特性汇总" tabindex="-1"><a class="header-anchor" href="#c-11特性汇总"><span>C++11特性汇总</span></a></h1><h2 id="auto-decltype" tabindex="-1"><a class="header-anchor" href="#auto-decltype"><span>auto &amp; decltype</span></a></h2><h2 id="左值右值" tabindex="-1"><a class="header-anchor" href="#左值右值"><span>左值右值</span></a></h2><h3 id="万能引用与完美转发" tabindex="-1"><a class="header-anchor" href="#万能引用与完美转发"><span>万能引用与完美转发</span></a></h3><ul><li><a href="https://zhuanlan.zhihu.com/p/99524127" target="_blank" rel="noopener noreferrer">现代C++之万能引用、完美转发、引用折叠</a></li></ul><h2 id="列表初始化" tabindex="-1"><a class="header-anchor" href="#列表初始化"><span>列表初始化</span></a></h2><h2 id="std-function-std-bind-lambda表达式" tabindex="-1"><a class="header-anchor" href="#std-function-std-bind-lambda表达式"><span>std::function &amp; std::bind &amp; lambda表达式</span></a></h2><h2 id="模板的改进" tabindex="-1"><a class="header-anchor" href="#模板的改进"><span>模板的改进</span></a></h2><h2 id="并发" tabindex="-1"><a class="header-anchor" href="#并发"><span>并发</span></a></h2><h2 id="智能指针" tabindex="-1"><a class="header-anchor" href="#智能指针"><span>智能指针</span></a></h2><h2 id="基于范围的for循环" tabindex="-1"><a class="header-anchor" href="#基于范围的for循环"><span>基于范围的for循环</span></a></h2><h2 id="委托构造函数" tabindex="-1"><a class="header-anchor" href="#委托构造函数"><span>委托构造函数</span></a></h2><h2 id="继承构造函数" tabindex="-1"><a class="header-anchor" href="#继承构造函数"><span>继承构造函数</span></a></h2><h2 id="nullptr" tabindex="-1"><a class="header-anchor" href="#nullptr"><span>nullptr</span></a></h2><h2 id="final-override" tabindex="-1"><a class="header-anchor" href="#final-override"><span>final &amp; override</span></a></h2><h2 id="default" tabindex="-1"><a class="header-anchor" href="#default"><span>default</span></a></h2><h2 id="delete" tabindex="-1"><a class="header-anchor" href="#delete"><span>delete</span></a></h2><h2 id="explicit" tabindex="-1"><a class="header-anchor" href="#explicit"><span>explicit</span></a></h2><h2 id="const和constexpr" tabindex="-1"><a class="header-anchor" href="#const和constexpr"><span>const和constexpr</span></a></h2><h2 id="enum-class" tabindex="-1"><a class="header-anchor" href="#enum-class"><span>enum class</span></a></h2><h2 id="非受限联合体" tabindex="-1"><a class="header-anchor" href="#非受限联合体"><span>非受限联合体</span></a></h2><h2 id="sizeof-类中数据成员" tabindex="-1"><a class="header-anchor" href="#sizeof-类中数据成员"><span>sizeof(类中数据成员)</span></a></h2><h2 id="static-assert" tabindex="-1"><a class="header-anchor" href="#static-assert"><span>static_assert</span></a></h2><h2 id="自定义字面量" tabindex="-1"><a class="header-anchor" href="#自定义字面量"><span>自定义字面量</span></a></h2><h2 id="内存对齐" tabindex="-1"><a class="header-anchor" href="#内存对齐"><span>内存对齐</span></a></h2><h2 id="thread-local" tabindex="-1"><a class="header-anchor" href="#thread-local"><span>thread_local</span></a></h2><h2 id="随机数功能" tabindex="-1"><a class="header-anchor" href="#随机数功能"><span>随机数功能</span></a></h2><h2 id="正则表达式" tabindex="-1"><a class="header-anchor" href="#正则表达式"><span>正则表达式</span></a></h2><h2 id="chrono" tabindex="-1"><a class="header-anchor" href="#chrono"><span>chrono</span></a></h2><h2 id="std-forward-list" tabindex="-1"><a class="header-anchor" href="#std-forward-list"><span>std::forward_list</span></a></h2><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><p><a href="https://zhuanlan.zhihu.com/p/139515439" target="_blank" rel="noopener noreferrer">c++11新特性，所有知识点都在这了！</a></p>',32)]))}const c=a(r,[["render",i],["__file","C__11特性汇总.html.vue"]]),o=JSON.parse('{"path":"/02.%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/02.C__/C__11%E7%89%B9%E6%80%A7%E6%B1%87%E6%80%BB.html","title":"C++11特性汇总","lang":"zh-CN","frontmatter":{"title":"C++11特性汇总","date":"2024-09-20T00:00:00.000Z","order":1,"category":["C++"],"description":"C++11特性汇总 auto & decltype 左值右值 万能引用与完美转发 现代C++之万能引用、完美转发、引用折叠 列表初始化 std::function & std::bind & lambda表达式 模板的改进 并发 智能指针 基于范围的for循环 委托构造函数 继承构造函数 nullptr final & override default...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/02.%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/02.C__/C__11%E7%89%B9%E6%80%A7%E6%B1%87%E6%80%BB.html"}],["meta",{"property":"og:site_name","content":"Mr.Li"}],["meta",{"property":"og:title","content":"C++11特性汇总"}],["meta",{"property":"og:description","content":"C++11特性汇总 auto & decltype 左值右值 万能引用与完美转发 现代C++之万能引用、完美转发、引用折叠 列表初始化 std::function & std::bind & lambda表达式 模板的改进 并发 智能指针 基于范围的for循环 委托构造函数 继承构造函数 nullptr final & override default..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-30T13:53:16.000Z"}],["meta",{"property":"article:author","content":"Mr.Li"}],["meta",{"property":"article:published_time","content":"2024-09-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-30T13:53:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"C++11特性汇总\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-09-20T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-30T13:53:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Li\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"auto & decltype","slug":"auto-decltype","link":"#auto-decltype","children":[]},{"level":2,"title":"左值右值","slug":"左值右值","link":"#左值右值","children":[{"level":3,"title":"万能引用与完美转发","slug":"万能引用与完美转发","link":"#万能引用与完美转发","children":[]}]},{"level":2,"title":"列表初始化","slug":"列表初始化","link":"#列表初始化","children":[]},{"level":2,"title":"std::function & std::bind & lambda表达式","slug":"std-function-std-bind-lambda表达式","link":"#std-function-std-bind-lambda表达式","children":[]},{"level":2,"title":"模板的改进","slug":"模板的改进","link":"#模板的改进","children":[]},{"level":2,"title":"并发","slug":"并发","link":"#并发","children":[]},{"level":2,"title":"智能指针","slug":"智能指针","link":"#智能指针","children":[]},{"level":2,"title":"基于范围的for循环","slug":"基于范围的for循环","link":"#基于范围的for循环","children":[]},{"level":2,"title":"委托构造函数","slug":"委托构造函数","link":"#委托构造函数","children":[]},{"level":2,"title":"继承构造函数","slug":"继承构造函数","link":"#继承构造函数","children":[]},{"level":2,"title":"nullptr","slug":"nullptr","link":"#nullptr","children":[]},{"level":2,"title":"final & override","slug":"final-override","link":"#final-override","children":[]},{"level":2,"title":"default","slug":"default","link":"#default","children":[]},{"level":2,"title":"delete","slug":"delete","link":"#delete","children":[]},{"level":2,"title":"explicit","slug":"explicit","link":"#explicit","children":[]},{"level":2,"title":"const和constexpr","slug":"const和constexpr","link":"#const和constexpr","children":[]},{"level":2,"title":"enum class","slug":"enum-class","link":"#enum-class","children":[]},{"level":2,"title":"非受限联合体","slug":"非受限联合体","link":"#非受限联合体","children":[]},{"level":2,"title":"sizeof(类中数据成员)","slug":"sizeof-类中数据成员","link":"#sizeof-类中数据成员","children":[]},{"level":2,"title":"static_assert","slug":"static-assert","link":"#static-assert","children":[]},{"level":2,"title":"自定义字面量","slug":"自定义字面量","link":"#自定义字面量","children":[]},{"level":2,"title":"内存对齐","slug":"内存对齐","link":"#内存对齐","children":[]},{"level":2,"title":"thread_local","slug":"thread-local","link":"#thread-local","children":[]},{"level":2,"title":"随机数功能","slug":"随机数功能","link":"#随机数功能","children":[]},{"level":2,"title":"正则表达式","slug":"正则表达式","link":"#正则表达式","children":[]},{"level":2,"title":"chrono","slug":"chrono","link":"#chrono","children":[]},{"level":2,"title":"std::forward_list","slug":"std-forward-list","link":"#std-forward-list","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1730459239000,"updatedTime":1732974796000,"contributors":[{"name":"lyw","email":"806555632@qq.com","commits":2}]},"readingTime":{"minutes":0.55,"words":165},"filePathRelative":"02.编程语言/02.C++/C++11特性汇总.md","localizedDate":"2024年9月20日","excerpt":"\\n<h2>auto &amp; decltype</h2>\\n<h2>左值右值</h2>\\n<h3>万能引用与完美转发</h3>\\n<ul>\\n<li><a href=\\"https://zhuanlan.zhihu.com/p/99524127\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">现代C++之万能引用、完美转发、引用折叠</a></li>\\n</ul>\\n<h2>列表初始化</h2>\\n<h2>std::function &amp; std::bind &amp; lambda表达式</h2>\\n<h2>模板的改进</h2>\\n<h2>并发</h2>\\n<h2>智能指针</h2>","autoDesc":true}');export{c as comp,o as data};
