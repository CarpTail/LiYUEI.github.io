import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as n,o as e}from"./app-CgyEwi_p.js";const l={};function t(h,i){return e(),a("div",null,i[0]||(i[0]=[n(`<h1 id="conan使用包-一" tabindex="-1"><a class="header-anchor" href="#conan使用包-一"><span>Conan使用包(一)</span></a></h1><p>见<a href="https://docs.conan.io/2/tutorial/consuming_packages.html" target="_blank" rel="noopener noreferrer">官方文档</a>。</p><h2 id="使用-conan-构建一个简单的-cmake-项目" tabindex="-1"><a class="header-anchor" href="#使用-conan-构建一个简单的-cmake-项目"><span>使用 Conan 构建一个简单的 CMake 项目</span></a></h2><p>例子将创建一个使用最流行的 C ++ 库之一Zlib的字符串压缩器应用程序。将使用 CMake 作为构建系统， 但请记住，Conan适用于任何构建系统，并不局限于使用 CMake。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> clone</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://github.com/conan-io/examples2.git</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> examples2/tutorial/consuming_packages/simple_cmake_project</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>从一个非常简单的 C 语言项目开始，其结构如下：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">.</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">├──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> CMakeLists.txt</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">└──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> src</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    └──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> main.c</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该项目包含一个基本的CMakeLists.txt，其中包括zlib依赖项和main.c中的字符串压缩程序的源代码。</p><p>此外， CMakeLists.txt的内容如下：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>cmake_minimum_required(VERSION 3.15)</span></span>
<span class="line"><span>project(compressor C)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>find_package(ZLIB REQUIRED)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>add_executable(\${PROJECT_NAME} src/main.c)</span></span>
<span class="line"><span>target_link_libraries(\${PROJECT_NAME} ZLIB::ZLIB)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们的应用程序依赖于Zlib库。默认情况下，Conan 会尝试从名为<a href="https://conan.io/center" target="_blank" rel="noopener noreferrer">ConanCenter</a> 的远程服务器安装库。可以在那里搜索库并检查可用的版本。例子中，在检查了Zlib的可用版本后， 选择使用最新版本之一：zlib/1.3.1。</p><p>安装Zlib库并从我们的 Conan 项目中找到它的最简单方法是使用conanfile.txt文件。 让我们创建一个包含以下内容的文件：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[requires]</span></span>
<span class="line"><span>zlib/1.3.1</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[generators]</span></span>
<span class="line"><span>CMakeDeps</span></span>
<span class="line"><span>CMakeToolchain</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们向该文件添加了两个部分，其语法类似于INI文件:</p><ul><li>[requires]部分是我们声明想要在项目中使用的库的地方，在本例中是zlib/1.2.11。</li><li>[generators]部分告诉 Conan 生成编译器或构建系统将用来查找依赖项和构建项目的文件。 本例中，由于我们的项目基于CMake，我们将使用CMakeDeps生成有关Zlib库文件安装位置的信息， 并使用CMakeToolchain使用CMake工具链文件将构建信息传递给CMake 。</li></ul><p>除了conanfile.txt之外，我们还需要一个Conan 配置文件来构建我们的项目。Conan 配置文件允许用户为编译器、 构建配置、体系结构、共享或静态库等定义一组配置。默认情况下，Conan 不会尝试自动检测配置文件， 因此我们需要创建一个。要让 Conan 根据当前操作系统和已安装的工具尝试猜测配置文件，请运行：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">conan</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> profile</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> detect</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --force</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>我们将使用 Conan 安装Zlib并生成 CMake 查找此库和构建项目所需的文件。 我们将在 build文件夹中生成这些文件。为此，请运行：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> conan</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --output-folder=build</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --build=missing</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>Conan 从远程服务器安装了Zlib库，如果库可用，则默认为 Conan Center 服务器。 此服务器存储 Conan 配方（定义必须如何构建库的文件）和可重复使用的二进制文件， 这样我们就不必每次都从源代码构建。</li><li>Conan 在build文件夹下生成了几个文件。这些文件是由我们在conanfile.txt<code>CMakeToolchain</code>中设置的 和<code>CMakeDeps</code>生成器生成的。生成文件，以便 CMake 找到我们刚刚下载的 Zlib 库。另一方面， 为 CMake 生成一个工具链文件，以便我们可以使用我们为默认配置文件检测到的相同设置透明地使用 CMake 构建我们的项目。</li></ul><p>现在我们可以构建并运行压缩机应用程序了：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> build</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># assuming Visual Studio 15 2017 is your VS version and that it matches your default profile</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cmake</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ..</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -G</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Visual Studio 16 2019&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -DCMAKE_TOOLCHAIN_FILE=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;conan_toolchain.cmake&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -DCMAKE_BUILD_TYPE=Release</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cmake</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --build</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --config</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Release</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用构建工具作为-conan-包" tabindex="-1"><a class="header-anchor" href="#使用构建工具作为-conan-包"><span>使用构建工具作为 Conan 包</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[requires]</span></span>
<span class="line"><span>zlib/1.2.11</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[tool_requires]</span></span>
<span class="line"><span>cmake/3.22.6</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[generators]</span></span>
<span class="line"><span>CMakeDeps</span></span>
<span class="line"><span>CMakeToolchain</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在conanfile.txt文件中增加了[tool_requires]部分。声明要使用 CMake v3.22.6构建我们的应用程序。 执行<code>conan install</code>命令后 Conan 生成了一个名为<code>conanbuild.sh/bat</code>的新文件。此文件设置了一些环境变量， 我们可以使用这些变量将 CMake v3.22.6 的位置注入到我们的环境中。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> build</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> conanbuild.bat</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># conanbuild.ps1 if using Powershell</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="构建多种配置-发布、调试、静态和共享" tabindex="-1"><a class="header-anchor" href="#构建多种配置-发布、调试、静态和共享"><span>构建多种配置：发布、调试、静态和共享</span></a></h2><p>先克隆源代码以重新创建此项目。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> clone</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://github.com/conan-io/examples2.git</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> examples2/tutorial/consuming_packages/different_configurations</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们运行<code>conan profile detect</code>命令时，在第一个示例中创建了此默认配置文件。 Conan 将此文件存储在 Conan 用户主目录中的/profiles 文件夹中。 可以通过运行 <code>conan config home</code>命令来获取 Conan 用户主目录的位置， 然后显示/profiles文件夹中默认配置文件的内容，从而检查默认配置文件的内容：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[settings]</span></span>
<span class="line"><span>arch=x86_64</span></span>
<span class="line"><span>build_type=Release</span></span>
<span class="line"><span>compiler=msvc</span></span>
<span class="line"><span>compiler.cppstd=14</span></span>
<span class="line"><span>compiler.runtime=dynamic</span></span>
<span class="line"><span>compiler.version=192</span></span>
<span class="line"><span>os=Windows</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该[settings]部分包含有关操作系统、体系结构、编译器和构建配置等信息。</p><p>当调用设置参数的 Conan 命令时--profile，Conan 将从配置文件中获取所有信息并将其应用于要构建或安装的包。 如果不指定该参数，则相当于使用调用它 --profile=default。这两个命令的行为相同：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> conan</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --build=missing</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> conan</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --build=missing</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --profile=default</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以存储不同的配置文件，并使用它们来构建不同的设置。例如，使用<code>build_type=Debug</code>， 或将添加到使用tool_requires该配置文件构建的所有包中。 我们将创建一个调试配置文件来尝试使用不同的配置进行构建：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[settings]</span></span>
<span class="line"><span>arch=x86_64</span></span>
<span class="line"><span>build_type=Debug</span></span>
<span class="line"><span>compiler=msvc</span></span>
<span class="line"><span>compiler.cppstd=14</span></span>
<span class="line"><span>compiler.runtime=dynamic</span></span>
<span class="line"><span>compiler.version=192</span></span>
<span class="line"><span>os=Windows</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="修改设置-对应用程序及其依赖项使用调试配置¶" tabindex="-1"><a class="header-anchor" href="#修改设置-对应用程序及其依赖项使用调试配置¶"><span>修改设置：对应用程序及其依赖项使用调试配置¶</span></a></h3><p>使用配置文件并不是设置要使用的配置的唯一方法。还可以使用参数覆盖 Conan 命令中的配置文件设置。 例如，您可以在Debug配置而不是Release--settings配置中从前面的示例构建项目，如：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> conan</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --output-folder=build</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --build=missing</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --settings=build_type=Debug</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="修改选项-将应用程序依赖项链接为共享库" tabindex="-1"><a class="header-anchor" href="#修改选项-将应用程序依赖项链接为共享库"><span>修改选项：将应用程序依赖项链接为共享库</span></a></h3><p>到目前为止，我们一直在应用程序中静态链接Zlib。这是因为在 Zlib 的 Conan 包中， 有一个属性设置为默认以该模式构建。我们可以通过将选项设置为使用参数从静态链接更改为共享链接。 为此，请运行：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> conan</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --output-folder=build</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --build=missing</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --options=zlib/1.2.11:shared=True</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>执行此操作后，Conan 将安装Zlib共享库，生成使用它们构建的文件，以及在运行应用程序时定位这些动态库所需的文件。 由于共享库（Windows 中的.dll、OSX中的.dylib和Linux中的.so）是在运行时加载的。 这意味着应用程序可执行文件需要知道运行时所需的共享库在哪里。在Windows上，动态链接器将在PATH目录中搜索。 在OSX上，它将在DYLD_LIBRARY_PATH中声明的目录中搜索，而在Linux上将使用LD_LIBRARY_PATH。</p><p>Conan 提供了一种机制来定义这些变量，并使可执行文件能够找到并加载这些共享库。 这个机制就是VirtualRunEnv生成器。如果你检查输出文件夹，你会看到Conan生成了一个名为conanrun.sh/bat的新文件。 这是在执行<code>conan install</code>时激活该选项时自动调用该生成器的结果。 这个生成的脚本将设置PATH、LD_LIBRARY_PATH、DYLD_LIBRARY_PATH和DYLD_FRAMEWORK_PATH环境变量， 以便可执行文件可以找到共享库。</p><p>此外，还会创建一个名为的停用脚本deactivate_conanrun.sh/bat来恢复环境。</p><h3 id="设置和选项之间的区别" tabindex="-1"><a class="header-anchor" href="#设置和选项之间的区别"><span>设置和选项之间的区别</span></a></h3><p>在Debug和Release配置之间切换时，我们使用了 Conan设置，但是当我们为可执行文件设置共享模式时， 我们使用了 Conan选项。请注意设置和选项之间的区别：</p><ul><li>设置通常是客户端计算机定义的项目范围的配置。诸如操作系统、编译器或构建配置之类的东西对于 多个 Conan 包来说是通用的，因此为其中一个包定义一个默认值是没有意义的。 例如，Conan 包将“Visual Studio”声明为默认编译器是没有意义的， 因为这是由最终使用者定义的，如果他们在 Linux 中工作，这不太可能有意义。</li><li>选项用于特定于包的配置，可在配方中设置为默认值。例如，一个包可以定义其默认链接是静态的， 如果使用者没有另行指定，则应使用此链接。</li></ul><h3 id="引入-package-id-的概念" tabindex="-1"><a class="header-anchor" href="#引入-package-id-的概念"><span>引入 Package ID 的概念</span></a></h3><p>package_id是 Conan 用来确定软件包二进制兼容性的标识符。它基于几个因素计算得出， 包括软件包的设置、选项和依赖项。当您修改其中任何一个因素时， Conan 都会计算一个新的package_id来引用相应的二进制文件。</p><p>以下是该过程的具体细节：</p><ol><li><strong>确定设置和选项</strong>：Conan首先检索用户的输入设置和选项。这些可以来自命令行或配置文件， 例如 –settings=build_type=Debug或–profile=debug。</li><li><strong>计算包 ID</strong> ：使用设置、选项和依赖项的当前值，Conan 计算哈希值。 此哈希值用作 package_id ，代表二进制包的唯一标识。、</li><li><strong>获取二进制文件</strong>：Conan 随后检查其缓存或指定的远程服务器，查找具有计算出的package_id的二进制包。 如果找到匹配项，它会检索该二进制文件。如果没有，Conan 可以从源代码构建包或指示二进制文件缺失。</li></ol>`,52)]))}const r=s(l,[["render",t],["__file","03.Conan使用包(一).html.vue"]]),k=JSON.parse('{"path":"/03.%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/Conan/03.Conan%E4%BD%BF%E7%94%A8%E5%8C%85(%E4%B8%80).html","title":"Conan使用包(一)","lang":"zh-CN","frontmatter":{"title":"Conan使用包(一)","date":"2024-08-20T00:00:00.000Z","order":3,"category":["工具使用"],"tag":["Conan"],"description":"Conan使用包(一) 见官方文档。 使用 Conan 构建一个简单的 CMake 项目 例子将创建一个使用最流行的 C ++ 库之一Zlib的字符串压缩器应用程序。将使用 CMake 作为构建系统， 但请记住，Conan适用于任何构建系统，并不局限于使用 CMake。 从一个非常简单的 C 语言项目开始，其结构如下： 该项目包含一个基本的CMakeL...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/03.%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/Conan/03.Conan%E4%BD%BF%E7%94%A8%E5%8C%85(%E4%B8%80).html"}],["meta",{"property":"og:site_name","content":"Mr.Li"}],["meta",{"property":"og:title","content":"Conan使用包(一)"}],["meta",{"property":"og:description","content":"Conan使用包(一) 见官方文档。 使用 Conan 构建一个简单的 CMake 项目 例子将创建一个使用最流行的 C ++ 库之一Zlib的字符串压缩器应用程序。将使用 CMake 作为构建系统， 但请记住，Conan适用于任何构建系统，并不局限于使用 CMake。 从一个非常简单的 C 语言项目开始，其结构如下： 该项目包含一个基本的CMakeL..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-30T13:53:16.000Z"}],["meta",{"property":"article:author","content":"Mr.Li"}],["meta",{"property":"article:tag","content":"Conan"}],["meta",{"property":"article:published_time","content":"2024-08-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-30T13:53:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Conan使用包(一)\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-08-20T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-30T13:53:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Li\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"使用 Conan 构建一个简单的 CMake 项目","slug":"使用-conan-构建一个简单的-cmake-项目","link":"#使用-conan-构建一个简单的-cmake-项目","children":[]},{"level":2,"title":"使用构建工具作为 Conan 包","slug":"使用构建工具作为-conan-包","link":"#使用构建工具作为-conan-包","children":[]},{"level":2,"title":"构建多种配置：发布、调试、静态和共享","slug":"构建多种配置-发布、调试、静态和共享","link":"#构建多种配置-发布、调试、静态和共享","children":[{"level":3,"title":"修改设置：对应用程序及其依赖项使用调试配置¶","slug":"修改设置-对应用程序及其依赖项使用调试配置¶","link":"#修改设置-对应用程序及其依赖项使用调试配置¶","children":[]},{"level":3,"title":"修改选项：将应用程序依赖项链接为共享库","slug":"修改选项-将应用程序依赖项链接为共享库","link":"#修改选项-将应用程序依赖项链接为共享库","children":[]},{"level":3,"title":"设置和选项之间的区别","slug":"设置和选项之间的区别","link":"#设置和选项之间的区别","children":[]},{"level":3,"title":"引入 Package ID 的概念","slug":"引入-package-id-的概念","link":"#引入-package-id-的概念","children":[]}]}],"git":{"createdTime":1726728859000,"updatedTime":1732974796000,"contributors":[{"name":"lyw","email":"806555632@qq.com","commits":2}]},"readingTime":{"minutes":7.87,"words":2361},"filePathRelative":"03.工具使用/Conan/03.Conan使用包(一).md","localizedDate":"2024年8月20日","excerpt":"\\n<p>见<a href=\\"https://docs.conan.io/2/tutorial/consuming_packages.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">官方文档</a>。</p>\\n<h2>使用 Conan 构建一个简单的 CMake 项目</h2>\\n<p>例子将创建一个使用最流行的 C ++ 库之一Zlib的字符串压缩器应用程序。将使用 CMake 作为构建系统，\\n但请记住，Conan适用于任何构建系统，并不局限于使用 CMake。</p>\\n<div class=\\"language-shell line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"shell\\" data-title=\\"shell\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">$</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> git</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> clone</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> https://github.com/conan-io/examples2.git</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">$</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> cd</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> examples2/tutorial/consuming_packages/simple_cmake_project</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{r as comp,k as data};
