import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as l,o as n}from"./app-CgyEwi_p.js";const t={};function e(h,i){return n(),a("div",null,i[0]||(i[0]=[l(`<h1 id="面试题精粹" tabindex="-1"><a class="header-anchor" href="#面试题精粹"><span>面试题精粹</span></a></h1><h3 id="volatile作用与用法" tabindex="-1"><a class="header-anchor" href="#volatile作用与用法"><span>volatile作用与用法</span></a></h3><ul><li>volatile是一个类型修饰符。volatile修饰的数据，编译器不可对其进行执行期寄存于寄存器的优化（直接存取原始内存地址）</li><li>多用于多线程编程时防止编译优化导致数据的值没有及时更新导致错误</li><li>volatile一般用在： <ul><li>中断服务程序中修改的供其它程序检测的变量需要加volatile</li><li>多任务环境下各任务间共享的标志应该加volatile</li><li>存储器映射的硬件寄存器通常也要加volatile说明，因为每次对它的读写都可能有不同意义</li></ul></li></ul><h3 id="mutable作用与用法" tabindex="-1"><a class="header-anchor" href="#mutable作用与用法"><span>mutable作用与用法</span></a></h3><ul><li><p>mutable在类中只能够修饰非静态数据成员</p></li><li><p>类内部变量设置为mutable，可以在const成员函数中修改类内部变量。 让类的一些次要的或者是辅助性的成员变量随时可以被更改</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> A</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    A</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">m_a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(a){}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> matest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> macout</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> m_a </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">private:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    mutable</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> m_a;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> A</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">matest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    m_a </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">//在定义时用mutable来突破这层限制</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> m_a </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>允许修改const修饰的类对象</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">  ST</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{   </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a;    </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  mutable</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> b;   </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ST st</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};    </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">st</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">11</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    //编译错误    </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">st</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">b</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">22</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    //允许</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="static作用与用法" tabindex="-1"><a class="header-anchor" href="#static作用与用法"><span>static作用与用法</span></a></h3><p><a href="https://cloud.tencent.com/developer/article/2288024" target="_blank" rel="noopener noreferrer">C++避坑---关键字static的使用及注意事项</a></p><ul><li>c++内存布局</li><li>静态变量初始化顺序</li><li>修饰类和修饰普通变量/函数的区别</li></ul><p>如下：</p><ul><li>被static修饰的变量的存储位置都在静态区，且生命周期延长至整个程序运行结束</li><li>static具有隔离作用，被static修饰的全局变量和全局函数的作用域由全局变为当前文件</li><li>静态变量虽然具有全局变量的生命周期，但只能作用于自己的作用域</li><li>普通静态成员需要在类的外面进行初始化</li><li>静态成员函数不能调用类的非静态成员，包括非静态成员和非静态成员函数</li><li>c++17后可以使用inline static 修饰类变量</li></ul><h3 id="const作用与用法" tabindex="-1"><a class="header-anchor" href="#const作用与用法"><span>const作用与用法</span></a></h3><ul><li>const修饰基本数据类型</li><li>const修饰函数</li><li>const修饰指针类型(区分在前和在后)</li><li>const修饰引用（&amp;）</li><li>不能在类声明中初始化const数据成员</li></ul><h3 id="extern作用与用法" tabindex="-1"><a class="header-anchor" href="#extern作用与用法"><span>extern作用与用法</span></a></h3><ul><li>C语言中，修饰符extern用在变量或者函数的声明前，用来说明此变量/函数是在别处定义的，要在此处引用</li><li>注意extern &quot;C&quot;的用法，一般用于C与C++混合编译的场景下，也支持其他支持该特性的语言调用</li><li>c++动态加载dll(dll)与静态加载dll(lib)</li></ul><h3 id="宏定义和展开、内联函数区别" tabindex="-1"><a class="header-anchor" href="#宏定义和展开、内联函数区别"><span>宏定义和展开、内联函数区别</span></a></h3><ul><li>简单宏替换</li><li>宏函数</li><li>宏换行符号 \\</li><li>宏变量拼接 #(字符串化) 与 ##(连接符)</li><li>宏展开顺序(60层): <ul><li>第一步：首先用实参代替形参，将实参代入宏文本中</li><li>第二步：第一步代入实参后，分两种情况： <ul><li>1、实参之前遇到#或或之后遇到##，不管实参是不是宏，实参都将不再展开</li><li>2、如果实参前后没有#或##，那就继续展开实参，展开发现还是宏则继续展开，直到展开到不能展开为止</li></ul></li><li>第三步：最后继续处理宏替换后的宏文本，如果仍包含宏，则继续展开</li></ul></li></ul><h3 id="malloc-strcpy-strcmp的实现-常用库函数实现-哪些库函数属于高危函数" tabindex="-1"><a class="header-anchor" href="#malloc-strcpy-strcmp的实现-常用库函数实现-哪些库函数属于高危函数"><span>malloc,strcpy,strcmp的实现，常用库函数实现，哪些库函数属于高危函数</span></a></h3><p>malloc：此函数用于在堆上动态分配内存</p><ul><li>ptmalloc是开源GNU C Library(glibc)默认的内存管理器，，当前大部分Linux服务端程序使用的是ptmalloc提供的malloc/free系列函数， 而它在性能上远差于Meta的jemalloc和Google的tcmalloc</li><li>Windows下使用mimalloc(微软)</li></ul><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">malloc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">size_t</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    //sbrk()是一种在C和C++中用于增加或减少程序数据段大小的系统调用。它通过改变堆的末尾地址来改变程序的内存空间。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    //这里的sbrk是一种可能的调用方式，在每个操作系统中不一定相同，具体可以看对应操作系统的底层源码，比如Windows下会调用virtual allocated函数一样</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    void</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">p </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> sbrk</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    void</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">request </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> sbrk</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(size);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (request </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> // sbrk failed.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        assert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(p </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> request);</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> // Not thread safe.</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> p;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>strcpy：此函数用于复制字符串。</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">char</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">strcpy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">char</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">dest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> char</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    char</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ret </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> dest;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ((</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">dest</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">src</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">!=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        ;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ret;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>strcmp: 此函数用于比较两个字符串。</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> strcmp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> char</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">str1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> char</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">str2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">str1 </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">str1 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">str2)) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        str1</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        str2</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">unsigned</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> char</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)str1 </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">unsigned</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> char</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)str2;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>一般来说，任何可以导致缓冲区溢出、整数溢出、空指针引用或其他形式的未定义行为的函数都可能是高风险的。 在C/C++语言中，一些常见的例子包括gets(), scanf(), strcpy(), strcat(), sprintf()等， 这些函数在使用不当时可能会导致安全问题</li><li>对于C++中的STL中来说，使用iterator可能会导致不安全的行为，这个通常会在进行循环的时候会用到， 我们一般情况下可以用at()函数或者使用类似于for(auto element : elements)， 以及特定的STL自带的库函数</li></ul><h3 id="stl原理及实现" tabindex="-1"><a class="header-anchor" href="#stl原理及实现"><span>STL原理及实现</span></a></h3><ul><li>序列式容器</li><li>关联式容器</li><li>vector list linkedlist deque queue priority_queue</li><li>set map multiset multimap unorderd_set unordered_map</li></ul><h3 id="虚函数" tabindex="-1"><a class="header-anchor" href="#虚函数"><span>虚函数</span></a></h3><ul><li>虚函数的作用和实现原理</li><li>纯虚函数</li></ul><h3 id="c-内存分配机制" tabindex="-1"><a class="header-anchor" href="#c-内存分配机制"><span>C++内存分配机制</span></a></h3><p><a href="https://raoxuntian.github.io/2020/07/03/memory-alignment/" target="_blank" rel="noopener noreferrer">C/C++中的内存对齐</a></p><h3 id="指针" tabindex="-1"><a class="header-anchor" href="#指针"><span>指针</span></a></h3><p><a href="https://juejin.cn/post/7103143088587014158" target="_blank" rel="noopener noreferrer">C++进阶：智能指针之weak_ptr</a></p><h3 id="" tabindex="-1"><a class="header-anchor" href="#"><span></span></a></h3>`,34)]))}const r=s(t,[["render",e],["__file","面试题精粹.html.vue"]]),d=JSON.parse('{"path":"/02.%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/02.C__/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%B2%BE%E7%B2%B9.html","title":"面试题精粹","lang":"zh-CN","frontmatter":{"title":"面试题精粹","date":"2024-09-20T00:00:00.000Z","order":1,"category":["C++"],"description":"面试题精粹 volatile作用与用法 volatile是一个类型修饰符。volatile修饰的数据，编译器不可对其进行执行期寄存于寄存器的优化（直接存取原始内存地址） 多用于多线程编程时防止编译优化导致数据的值没有及时更新导致错误 volatile一般用在： 中断服务程序中修改的供其它程序检测的变量需要加volatile 多任务环境下各任务间共享的标...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/02.%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/02.C__/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%B2%BE%E7%B2%B9.html"}],["meta",{"property":"og:site_name","content":"Mr.Li"}],["meta",{"property":"og:title","content":"面试题精粹"}],["meta",{"property":"og:description","content":"面试题精粹 volatile作用与用法 volatile是一个类型修饰符。volatile修饰的数据，编译器不可对其进行执行期寄存于寄存器的优化（直接存取原始内存地址） 多用于多线程编程时防止编译优化导致数据的值没有及时更新导致错误 volatile一般用在： 中断服务程序中修改的供其它程序检测的变量需要加volatile 多任务环境下各任务间共享的标..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-01T11:07:19.000Z"}],["meta",{"property":"article:author","content":"Mr.Li"}],["meta",{"property":"article:published_time","content":"2024-09-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-01T11:07:19.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"面试题精粹\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-09-20T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-01T11:07:19.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Li\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":3,"title":"volatile作用与用法","slug":"volatile作用与用法","link":"#volatile作用与用法","children":[]},{"level":3,"title":"mutable作用与用法","slug":"mutable作用与用法","link":"#mutable作用与用法","children":[]},{"level":3,"title":"static作用与用法","slug":"static作用与用法","link":"#static作用与用法","children":[]},{"level":3,"title":"const作用与用法","slug":"const作用与用法","link":"#const作用与用法","children":[]},{"level":3,"title":"extern作用与用法","slug":"extern作用与用法","link":"#extern作用与用法","children":[]},{"level":3,"title":"宏定义和展开、内联函数区别","slug":"宏定义和展开、内联函数区别","link":"#宏定义和展开、内联函数区别","children":[]},{"level":3,"title":"malloc,strcpy,strcmp的实现，常用库函数实现，哪些库函数属于高危函数","slug":"malloc-strcpy-strcmp的实现-常用库函数实现-哪些库函数属于高危函数","link":"#malloc-strcpy-strcmp的实现-常用库函数实现-哪些库函数属于高危函数","children":[]},{"level":3,"title":"STL原理及实现","slug":"stl原理及实现","link":"#stl原理及实现","children":[]},{"level":3,"title":"虚函数","slug":"虚函数","link":"#虚函数","children":[]},{"level":3,"title":"C++内存分配机制","slug":"c-内存分配机制","link":"#c-内存分配机制","children":[]},{"level":3,"title":"指针","slug":"指针","link":"#指针","children":[]},{"level":3,"title":"","slug":"","link":"#","children":[]}],"git":{"createdTime":1730459239000,"updatedTime":1730459239000,"contributors":[{"name":"lyw","email":"806555632@qq.com","commits":1}]},"readingTime":{"minutes":4.76,"words":1428},"filePathRelative":"02.编程语言/02.C++/面试题精粹.md","localizedDate":"2024年9月20日","excerpt":"\\n<h3>volatile作用与用法</h3>\\n<ul>\\n<li>volatile是一个类型修饰符。volatile修饰的数据，编译器不可对其进行执行期寄存于寄存器的优化（直接存取原始内存地址）</li>\\n<li>多用于多线程编程时防止编译优化导致数据的值没有及时更新导致错误</li>\\n<li>volatile一般用在：\\n<ul>\\n<li>中断服务程序中修改的供其它程序检测的变量需要加volatile</li>\\n<li>多任务环境下各任务间共享的标志应该加volatile</li>\\n<li>存储器映射的硬件寄存器通常也要加volatile说明，因为每次对它的读写都可能有不同意义</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{r as comp,d as data};
