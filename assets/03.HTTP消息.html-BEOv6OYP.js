import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,b as l,o as a}from"./app-CgyEwi_p.js";const o="/assets/images/http_request_headers3.png",r="/assets/images/http_response_headers3.png",n="/assets/images/binary_framing2.png",s={};function T(p,e){return a(),i("div",null,e[0]||(e[0]=[l('<h1 id="http消息" tabindex="-1"><a class="header-anchor" href="#http消息"><span>HTTP消息</span></a></h1><p>HTTP 消息是服务器和客户端之间交换数据的方式。有两种类型的消息：</p><ul><li>请求（request）——由客户端发送用来触发一个服务器上的动作</li><li>响应（response）——来自服务器的应答</li></ul><p>HTTP 消息由采用 ASCII 编码的多行文本构成。</p><ul><li>在 HTTP/1.1 及早期版本中，这些消息通过连接公开地发送</li><li>在 HTTP/2 中，为了优化和性能方面的改进，曾经可人工阅读的消息被分到多个 HTTP 帧中</li></ul><p>HTTP 请求和响应具有相似的结构，由以下部分组成：</p><ol><li>一行起始行用于描述要执行的请求，或者是对应的状态，成功或失败。这个起始行总是单行的</li><li>一个可选的 HTTP 标头集合指明请求或描述消息主体（body）</li><li>一个空行指示所有关于请求的元数据已经发送完毕</li><li>一个可选的包含请求相关数据的主体（比如 HTML 表单内容），或者响应相关的文档。主体的大小有起始行的 HTTP 头来指定</li></ol><h2 id="http请求" tabindex="-1"><a class="header-anchor" href="#http请求"><span>HTTP请求</span></a></h2><h3 id="起始行" tabindex="-1"><a class="header-anchor" href="#起始行"><span>起始行</span></a></h3><p>HTTP 请求是由客户端发出的消息，用来使服务器执行动作。起始行（start-line）包含三个元素：</p><ul><li>一个 HTTP 方法，一个动词（像 <code>GET</code>、<code>PUT</code> 或者 <code>POST</code>）或者一个名词（像 <code>HEAD</code> 或者 <code>OPTIONS</code>）， 描述要执行的动作。例如，GET 表示要获取资源， POST 表示向服务器推送数据（创建或修改资源，或者产生要返回的临时文件）</li><li>请求目标（request target） 通常是一个 <code>URL</code>，或者是协议、端口和域名的绝对路径，通常以请求的环境为特征。 请求的格式因不同的 HTTP 方法而异。如下： <ul><li>一个绝对路径，末尾跟上一个 &#39;?&#39; 和查询字符串。这是最常见的形式，称为原始形式（origin form）， 被 GET、POST、HEAD 和 OPTIONS 方法所使用。 <blockquote><p>POST / HTTP/1.1<br> GET /background.png HTTP/1.0<br> HEAD /test.html?query=alibaba HTTP/1.1<br> OPTIONS /anypage.html HTTP/1.0</p></blockquote></li><li>一个完整的 URL，被称为绝对形式（absolute form），主要在使用 GET 方法连接到代理时使用。 <blockquote><p>GET http://developer.mozilla.org/zh-CN/docs/Web/HTTP/Messages HTTP/1.1</p></blockquote></li><li>由域名和可选端口（以 &#39;:&#39; 为前缀）组成的 URL 的 authority 部分，称为 authority form。 仅在使用 CONNECT 建立 HTTP 隧道时才使用。 <blockquote><p>CONNECT developer.mozilla.org:80 HTTP/1.1</p></blockquote></li><li>星号形式（asterisk form），一个简单的星号（&#39;*&#39;），配合 OPTIONS 方法使用，代表整个服务器。 <blockquote><p>OPTIONS * HTTP/1.1</p></blockquote></li></ul></li><li>HTTP 版本（HTTP version），定义了剩余消息的结构，作为对期望的响应版本的指示符。</li></ul><h3 id="标头-header" tabindex="-1"><a class="header-anchor" href="#标头-header"><span>标头（Header）</span></a></h3><p>来自请求的 HTTP 标头遵循和 HTTP 标头相同的基本结构：不区分大小写的字符串， 紧跟着的冒号（&#39;:&#39;）和一个结构取决于标头的值。整个标头（包括值）由一行组成，这一行可以相当长。</p><ul><li>通用标头（General header），例如 <code>Via</code>，适用于整个消息</li><li>请求标头（Request header），例如 <code>User-Agent</code>、<code>Accept-Type</code>， 通过进一步的定义（例如 <code>Accept-Language</code>）、 给定上下文（例如 Referer）或者进行有条件的限制（例如 <code>If-None</code>）来修改请求</li><li>表示标头（Representation header），例如 <code>Content-Type</code> 描述了消息数据的 原始格式和应用的任意编码（仅在消息有主体时才存在</li></ul><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="主体-body" tabindex="-1"><a class="header-anchor" href="#主体-body"><span>主体（Body）</span></a></h3><p>请求的最后一部分是它的主体。不是所有的请求都有一个主体： 例如获取资源的请求，像 GET、HEAD、DELETE 和 OPTIONS，通常它们不需要主体。 有些请求将数据发送到服务器以便更新数据：常见的情况是 POST 请求（包含 HTML 表单数据）。</p><ul><li>单一资源（Single-resource）主体，由一个单文件组成。 该类型的主体由两个标头定义：Content-Type 和 Content-Length</li><li>多资源（Multiple-resource）主体，由多部分主体组成， 每一部分包含不同的信息位。通常是和 HTML 表单连系在一起</li></ul><h2 id="http响应" tabindex="-1"><a class="header-anchor" href="#http响应"><span>HTTP响应</span></a></h2><h3 id="状态行" tabindex="-1"><a class="header-anchor" href="#状态行"><span>状态行</span></a></h3><p>HTTP 响应的起始行被称作状态行（status line），包含以下信息：</p><ol><li>协议版本，通常为 <code>HTTP/1.1</code></li><li>状态码（status code），表明请求是成功或失败。常见的状态码是 <code>200</code>、<code>404</code> 或 <code>302</code></li><li>状态文本（status text）。一个简短的，纯粹的信息，通过状态码的文本描述，帮助人们理解该 HTTP 消息</li></ol><p>一个典型的状态行看起来像这样：<code>HTTP/1.1 404 Not Found</code>。</p><h3 id="标头-header-1" tabindex="-1"><a class="header-anchor" href="#标头-header-1"><span>标头（Header）</span></a></h3><p>响应的 HTTP 标头遵循和任何其他标头相同的结构：不区分大小写的字符串， 紧跟着的冒号（&#39;:&#39;）和一个结构取决于标头类型的值。整个标头（包括其值）表现为单行形式。</p><ul><li>通用标头（General header），例如 Via，适用于整个消息</li><li>响应标头（Response header），例如 Vary 和 Accept-Ranges， 提供有关服务器的其他信息，这些信息不适合状态行</li><li>表示标头（Representation header），例如 Content-Type 描述了消息数据的 原始格式和应用的任意编码（仅在消息有主体时才存在）</li></ul><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="主体-boost" tabindex="-1"><a class="header-anchor" href="#主体-boost"><span>主体（Boost）</span></a></h3><p>响应的最后一部分是主体。不是所有的响应都有主体：具有状态码（如 201 或 204）的响应，通常不会有主体。</p><ul><li>单资源（Single-resource）主体，由已知长度的单个文件组成。 该类型主体由两个标头定义：Content-Type 和 Content-Length</li><li>单资源（Single-resource）主体，由未知长度的单个文件组成。 通过将 Transfer-Encoding 设置为 chunked 来使用分块编码</li><li>多资源（Multiple-resource）主体，由多部分 body 组成，每部分包含不同的信息段。但这是比较少见的</li></ul><h2 id="http-2帧" tabindex="-1"><a class="header-anchor" href="#http-2帧"><span>HTTP/2帧</span></a></h2><p>HTTP/1.x 消息有一些性能上的缺点：</p><ul><li>与主体不同，标头不会被压缩</li><li>两个消息之间的标头通常非常相似，但它们仍然在连接中重复传输</li><li>无法多路复用。当在同一个服务器打开几个连接时：TCP长连接比短连接更加有效</li></ul><p>HTTP/2 引入了一个额外的步骤：它将 HTTP/1.x 消息分成帧并嵌入到流（stream）中。 数据帧和报头帧分离，这将允许报头压缩。将多个流组合，这是一个被称为多路复用（multiplexing）的过程， 它允许更有效的底层 TCP 连接。</p><figure><img src="'+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>HTTP 帧现在对 Web 开发人员是透明的。在 HTTP/2 中，这是一个在 HTTP/1.1 和底层传输协议之间附加的步骤。 Web 开发人员不需要在其使用的 API 中做任何更改来利用 HTTP 帧； 当浏览器和服务器都可用时，HTTP/2 将被打开并使用。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Messages" target="_blank" rel="noopener noreferrer">MDN Web Docs 社区</a></p>',38)]))}const h=t(s,[["render",T],["__file","03.HTTP消息.html.vue"]]),P=JSON.parse('{"path":"/05.Web%E6%8A%80%E6%9C%AF/HTTP/02.HTTP%E6%8C%87%E5%8D%97/03.HTTP%E6%B6%88%E6%81%AF.html","title":"HTTP消息","lang":"zh-CN","frontmatter":{"title":"HTTP消息","date":"2024-08-15T00:00:00.000Z","order":3,"category":["计算机网络"],"tag":["HTTP"],"description":"HTTP消息 HTTP 消息是服务器和客户端之间交换数据的方式。有两种类型的消息： 请求（request）——由客户端发送用来触发一个服务器上的动作 响应（response）——来自服务器的应答 HTTP 消息由采用 ASCII 编码的多行文本构成。 在 HTTP/1.1 及早期版本中，这些消息通过连接公开地发送 在 HTTP/2 中，为了优化和性能方...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/05.Web%E6%8A%80%E6%9C%AF/HTTP/02.HTTP%E6%8C%87%E5%8D%97/03.HTTP%E6%B6%88%E6%81%AF.html"}],["meta",{"property":"og:site_name","content":"Mr.Li"}],["meta",{"property":"og:title","content":"HTTP消息"}],["meta",{"property":"og:description","content":"HTTP消息 HTTP 消息是服务器和客户端之间交换数据的方式。有两种类型的消息： 请求（request）——由客户端发送用来触发一个服务器上的动作 响应（response）——来自服务器的应答 HTTP 消息由采用 ASCII 编码的多行文本构成。 在 HTTP/1.1 及早期版本中，这些消息通过连接公开地发送 在 HTTP/2 中，为了优化和性能方..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/assets/images/http_request_headers3.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-30T13:53:16.000Z"}],["meta",{"property":"article:author","content":"Mr.Li"}],["meta",{"property":"article:tag","content":"HTTP"}],["meta",{"property":"article:published_time","content":"2024-08-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-30T13:53:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"HTTP消息\\",\\"image\\":[\\"https://mister-hope.github.io/assets/images/http_request_headers3.png\\",\\"https://mister-hope.github.io/assets/images/http_response_headers3.png\\",\\"https://mister-hope.github.io/assets/images/binary_framing2.png\\"],\\"datePublished\\":\\"2024-08-15T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-30T13:53:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Li\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"HTTP请求","slug":"http请求","link":"#http请求","children":[{"level":3,"title":"起始行","slug":"起始行","link":"#起始行","children":[]},{"level":3,"title":"标头（Header）","slug":"标头-header","link":"#标头-header","children":[]},{"level":3,"title":"主体（Body）","slug":"主体-body","link":"#主体-body","children":[]}]},{"level":2,"title":"HTTP响应","slug":"http响应","link":"#http响应","children":[{"level":3,"title":"状态行","slug":"状态行","link":"#状态行","children":[]},{"level":3,"title":"标头（Header）","slug":"标头-header-1","link":"#标头-header-1","children":[]},{"level":3,"title":"主体（Boost）","slug":"主体-boost","link":"#主体-boost","children":[]}]},{"level":2,"title":"HTTP/2帧","slug":"http-2帧","link":"#http-2帧","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1724743264000,"updatedTime":1732974796000,"contributors":[{"name":"lyw","email":"806555632@qq.com","commits":2}]},"readingTime":{"minutes":5.65,"words":1694},"filePathRelative":"05.Web技术/HTTP/02.HTTP指南/03.HTTP消息.md","localizedDate":"2024年8月15日","excerpt":"\\n<p>HTTP 消息是服务器和客户端之间交换数据的方式。有两种类型的消息：</p>\\n<ul>\\n<li>请求（request）——由客户端发送用来触发一个服务器上的动作</li>\\n<li>响应（response）——来自服务器的应答</li>\\n</ul>\\n<p>HTTP 消息由采用 ASCII 编码的多行文本构成。</p>\\n<ul>\\n<li>在 HTTP/1.1 及早期版本中，这些消息通过连接公开地发送</li>\\n<li>在 HTTP/2 中，为了优化和性能方面的改进，曾经可人工阅读的消息被分到多个 HTTP 帧中</li>\\n</ul>\\n<p>HTTP 请求和响应具有相似的结构，由以下部分组成：</p>","autoDesc":true}');export{h as comp,P as data};
