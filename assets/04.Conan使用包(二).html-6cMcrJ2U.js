import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,o as n,b as a}from"./app-B18flpjG.js";const e={},l=a(`<h1 id="conan使用包-二" tabindex="-1"><a class="header-anchor" href="#conan使用包-二"><span>Conan使用包(二)</span></a></h1><p>见<a href="https://docs.conan.io/2/tutorial/consuming_packages.html" target="_blank" rel="noopener noreferrer">官方文档</a>。</p><h2 id="使用conanfile-py与conanfile-txt的灵活性" tabindex="-1"><a class="header-anchor" href="#使用conanfile-py与conanfile-txt的灵活性"><span>使用conanfile.py与conanfile.txt的灵活性</span></a></h2><p>在前面的示例中，我们在conanfile.txt文件中声明了依赖项（ Zlib和CMake） 。让我们看一下该文件：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[requires]</span></span>
<span class="line"><span>zlib/1.2.11</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[tool_requires]</span></span>
<span class="line"><span>cmake/3.22.6</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[generators]</span></span>
<span class="line"><span>CMakeDeps</span></span>
<span class="line"><span>CMakeToolchain</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用conanfile.txt构建使用Conan的项目对于简单情况来说已经足够了，但如果需要更大的灵活性，则应使用 conanfile.py文件，可以在其中使用Python代码来执行诸如动态添加需求、根据其他选项更改选项或根据要求 设置选项等操作。让我们看一个关于如何迁移到conanfile.py并使用其中的一些功能的示例。</p><p>先克隆源代码以重新创建此项目。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> clone</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://github.com/conan-io/examples2.git</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> examples2/tutorial/consuming_packages/conanfile_py</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>检查文件夹的内容，注意其内容与前面的示例相同，但是使用 conanfile.py而不是conanfile.txt。</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>.</span></span>
<span class="line"><span>├── CMakeLists.txt</span></span>
<span class="line"><span>├── conanfile.py</span></span>
<span class="line"><span>└── src</span></span>
<span class="line"><span>    └── main.c</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们会将相同的信息转换为conanfile.py。这个文件通常被称为<code>Conan 配方</code>。它可用于使用包（如本例所示）， 也可用于创建包。对于我们当前的情况，它将定义我们的需求（库和构建工具）和修改选项的逻辑， 并设置我们想要如何使用这些包。在使用此文件创建包的情况下，它可以定义（除其他事项外）如何下载包的源代码、 如何从这些源构建二进制文件、如何打包二进制文件，以及供未来消费者如何使用包的信息。</p><p>以<code>Conan 配方</code>形式出现的conanfile.txt的等效内容可能如下所示：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> conan </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ConanFile</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> CompressorRecipe</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ConanFile</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    settings </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;os&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;compiler&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;build_type&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;arch&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    generators </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;CMakeToolchain&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;CMakeDeps&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> requirements</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">requires</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;zlib/1.2.11&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> build_requirements</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">tool_requires</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;cmake/3.22.6&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了创建<code>Conan 配方</code>，我们声明了一个从<code>ConanFile</code>继承的新类。此类具有不同的类属性和方法：</p><ul><li><strong>settings</strong>: 此类属性定义项目范围的变量，例如编译器、其版本或操作系统本身， 这些变量在我们构建项目时可能会发生变化。这与 Conan 如何管理二进制兼容性有关， 因为这些值将影响 Conan 包的包 ID值。稍后我们将解释 Conan 如何使用此值来管理二进制兼容性。</li><li><strong>generators</strong>: 类属性指定当我们调用<code>conan install</code>命令时将运行哪些 Conan 生成器。 在本例中，我们添加了<code>CMakeToolchain</code>和<code>CMakeDeps</code>，如conanfile.txt中所示。</li><li><strong>requirements()</strong>: 在这个方法中我们使用该self.requires()方法来声明 zlib/1.2.11依赖项。</li><li><strong>build_requirements()</strong>: 在这个方法中我们使用该self.tool_requires()方法来声明 cmake/3.22.6依赖项。</li></ul><p>运行与前面示例中相同的命令:</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>$ conan install . --output-folder=build --build=missing</span></span>
<span class="line"><span>$ cd build</span></span>
<span class="line"><span>$ conanbuild.bat</span></span>
<span class="line"><span>$ cmake .. -G &quot;Visual Studio 16 2019&quot; -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake</span></span>
<span class="line"><span>$ cmake --build . --config Release</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>Building with CMake version: 3.22.6</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>[100%] Built target compressor</span></span>
<span class="line"><span></span></span>
<span class="line"><span>$ Release\\compressor.exe</span></span>
<span class="line"><span>Uncompressed size is: 233</span></span>
<span class="line"><span>Compressed size is: 147</span></span>
<span class="line"><span>ZLIB VERSION: 1.2.11</span></span>
<span class="line"><span>$ deactivate_conanbuild.bat</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到目前为止，我们已经实现了使用conanfile.txt的相同功能，让我们看看如何利用conanfile.py的功能来定义 我们想要遵循的项目结构，并使用 Conan 设置和选项添加一些逻辑。</p><h3 id="使用-layout-方法" tabindex="-1"><a class="header-anchor" href="#使用-layout-方法"><span>使用 layout() 方法</span></a></h3><p>在前面的例子中，每次执行<code>conan install</code>命令时，我们都必须使用–output-folder参数来定义我们想要在 何处创建 Conan 生成的文件。有一种更简洁的方法来决定我们希望 Conan 在何处为构建系统生成文件。例如， 是否根据我们正在使用的 CMake 生成器的类型来使用不同的输出文件夹。 可以在conanfile.py中的layout()方法中直接定义它。</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>import os</span></span>
<span class="line"><span>from conan import ConanFile</span></span>
<span class="line"><span></span></span>
<span class="line"><span>class CompressorRecipe(ConanFile):</span></span>
<span class="line"><span>    settings = &quot;os&quot;, &quot;compiler&quot;, &quot;build_type&quot;, &quot;arch&quot;</span></span>
<span class="line"><span>    generators = &quot;CMakeToolchain&quot;, &quot;CMakeDeps&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    def requirements(self):</span></span>
<span class="line"><span>        self.requires(&quot;zlib/1.2.11&quot;)</span></span>
<span class="line"><span>        if self.settings.os == &quot;Windows&quot;:</span></span>
<span class="line"><span>            self.requires(&quot;base64/0.4.0&quot;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    def build_requirements(self):</span></span>
<span class="line"><span>        if self.settings.os != &quot;Windows&quot;:</span></span>
<span class="line"><span>            self.tool_requires(&quot;cmake/3.22.6&quot;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    def layout(self):</span></span>
<span class="line"><span>        # We make the assumption that if the compiler is msvc the</span></span>
<span class="line"><span>        # CMake generator is multi-config</span></span>
<span class="line"><span>        multi = True if self.settings.get_safe(&quot;compiler&quot;) == &quot;msvc&quot; else False</span></span>
<span class="line"><span>        if multi:</span></span>
<span class="line"><span>            self.folders.generators = os.path.join(&quot;build&quot;, &quot;generators&quot;)</span></span>
<span class="line"><span>            self.folders.build = &quot;build&quot;</span></span>
<span class="line"><span>        else:</span></span>
<span class="line"><span>            self.folders.generators = os.path.join(&quot;build&quot;, str(self.settings.build_type), &quot;generators&quot;)</span></span>
<span class="line"><span>            self.folders.build = os.path.join(&quot;build&quot;, str(self.settings.build_type))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在layout()方法中定义了<code>self.folders.generators</code>属性 。这是Conan生成的所有辅助文件 （CMake工具链和cmake依赖文件）将被放置的文件夹。</p><p>请注意，如果是多配置生成器（如 Visual Studio）或单配置生成器（如 Unix Makefiles）， 文件夹的定义会有所不同。在第一种情况下，无论构建类型如何，文件夹都是相同的， 构建系统将管理该文件夹内的不同构建类型。但是像 Unix Makefiles 这样的单配置生成器必须为每个不同的 配置使用不同的文件夹（作为不同的 build_type Release/Debug）。 在这种情况下，我们添加了一个简单的逻辑，如果编译器名称是msvc ，则考虑多配置。</p><p>检查运行与前面示例中相同的命令（不使用 –output-folder参数）是否会产生与之前相同的结果：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>$ conan install . --build=missing</span></span>
<span class="line"><span>$ cd build</span></span>
<span class="line"><span>$ generators\\conanbuild.bat</span></span>
<span class="line"><span>$ cmake .. -G &quot;Visual Studio 16 2019&quot; -DCMAKE_TOOLCHAIN_FILE=generators\\conan_toolchain.cmake</span></span>
<span class="line"><span>$ cmake --build . --config Release</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>Building with CMake version: 3.22.6</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>[100%] Built target compressor</span></span>
<span class="line"><span></span></span>
<span class="line"><span>$ Release\\compressor.exe</span></span>
<span class="line"><span>Uncompressed size is: 233</span></span>
<span class="line"><span>Compressed size is: 147</span></span>
<span class="line"><span>ZLIB VERSION: 1.2.11</span></span>
<span class="line"><span>$ generators\\deactivate_conanbuild.bat</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>没有必要总是在conanfile.py中编写此逻辑。您可以导入一些预定义的布局并直接在配方中使用。例如， 对于 CMake 案例，Conan 中已经定义了一个cmake_layout() ：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>from conan import ConanFile</span></span>
<span class="line"><span>from conan.tools.cmake import cmake_layout</span></span>
<span class="line"><span></span></span>
<span class="line"><span>class CompressorRecipe(ConanFile):</span></span>
<span class="line"><span>    settings = &quot;os&quot;, &quot;compiler&quot;, &quot;build_type&quot;, &quot;arch&quot;</span></span>
<span class="line"><span>    generators = &quot;CMakeToolchain&quot;, &quot;CMakeDeps&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    def requirements(self):</span></span>
<span class="line"><span>        self.requires(&quot;zlib/1.2.11&quot;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    def build_requirements(self):</span></span>
<span class="line"><span>        self.tool_requires(&quot;cmake/3.22.6&quot;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    def layout(self):</span></span>
<span class="line"><span>        cmake_layout(self)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用validate-方法对不支持的配置引发错误" tabindex="-1"><a class="header-anchor" href="#使用validate-方法对不支持的配置引发错误"><span>使用validate（）方法对不支持的配置引发错误</span></a></h3><p>当 Conan 加载 conanfile.py 时，会评估<code>validate()</code>方法，您可以使用它来检查输入设置。 例如，如果您的项目不支持macOS上的armv8架构，您可以引发ConanInvalidConfiguration异常， 让 Conan 返回特殊错误代码。这将表明用于设置或选项的配置不受支持。</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>...</span></span>
<span class="line"><span>from conan.errors import ConanInvalidConfiguration</span></span>
<span class="line"><span></span></span>
<span class="line"><span>class CompressorRecipe(ConanFile):</span></span>
<span class="line"><span>    ...</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    def validate(self):</span></span>
<span class="line"><span>        if self.settings.os == &quot;Macos&quot; and self.settings.arch == &quot;armv8&quot;:</span></span>
<span class="line"><span>            raise ConanInvalidConfiguration(&quot;ARM v8 not supported in Macos&quot;)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用-conanfile-py-的条件要求" tabindex="-1"><a class="header-anchor" href="#使用-conanfile-py-的条件要求"><span>使用 conanfile.py 的条件要求</span></a></h3><p>可以向<code>requirements()</code>方法添加一些逻辑，以有条件地添加或删除要求。例如，想要在Windows中添加其他依赖项， 或者想要使用系统的CMake安装而不是使用Conan tool_requires()：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>from conan import ConanFile</span></span>
<span class="line"><span></span></span>
<span class="line"><span>class CompressorRecipe(ConanFile):</span></span>
<span class="line"><span>    # Binary configuration</span></span>
<span class="line"><span>    settings = &quot;os&quot;, &quot;compiler&quot;, &quot;build_type&quot;, &quot;arch&quot;</span></span>
<span class="line"><span>    generators = &quot;CMakeToolchain&quot;, &quot;CMakeDeps&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    def requirements(self):</span></span>
<span class="line"><span>        self.requires(&quot;zlib/1.2.11&quot;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        # Add base64 dependency for Windows</span></span>
<span class="line"><span>        if self.settings.os == &quot;Windows&quot;:</span></span>
<span class="line"><span>            self.requires(&quot;base64/0.4.0&quot;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    def build_requirements(self):</span></span>
<span class="line"><span>        # Use the system&#39;s CMake for Windows</span></span>
<span class="line"><span>        if self.settings.os != &quot;Windows&quot;:</span></span>
<span class="line"><span>            self.tool_requires(&quot;cmake/3.22.6&quot;)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用-generate-方法从包中复制资源" tabindex="-1"><a class="header-anchor" href="#使用-generate-方法从包中复制资源"><span>使用 generate() 方法从包中复制资源</span></a></h3><p>在某些情况下，Conan 软件包包含对其打包的库的使用有用甚至必要的文件。 这些文件可以是配置文件、资产，也可以是项目正确构建或运行所需的特定文件。 使用<code>generate()</code>方法，可以将这些文件从 Conan 缓存复制到项目的文件夹中， 确保所有必需的资源都可以直接使用。</p><p>以下示例展示了如何将所有资源从依赖项目resdirs录复制到assets项目内的目录：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>import os</span></span>
<span class="line"><span>from conan import ConanFile</span></span>
<span class="line"><span>from conan.tools.files import copy</span></span>
<span class="line"><span></span></span>
<span class="line"><span>class MyProject(ConanFile):</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    ...</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    def generate(self):</span></span>
<span class="line"><span>        # Copy all resources from the dependency&#39;s resource directory</span></span>
<span class="line"><span>        # to the &quot;assets&quot; folder in the source directory of your project</span></span>
<span class="line"><span>        dep = self.dependencies[&quot;dep_name&quot;]</span></span>
<span class="line"><span>        copy(self, &quot;*&quot;, dep.cpp_info.resdirs[0], os.path.join(self.source_folder, &quot;assets&quot;))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，完成此步骤后，所有这些资源文件都将复制到本地，以便您在项目的构建过程中使用它们。 有关如何在方法中从包导入文件的完整示例，可以参考有关使用<code>Dear ImGui</code>库的 <a href="https://blog.conan.io/2019/06/26/An-introduction-to-the-Dear-ImGui-library.html" target="_blank" rel="noopener noreferrer">博客文章</a>， 其中演示了如何根据图形API导入库的绑定。</p><h2 id="如何使用conan交叉编译应用程序-托管和构建上下文" tabindex="-1"><a class="header-anchor" href="#如何使用conan交叉编译应用程序-托管和构建上下文"><span>如何使用Conan交叉编译应用程序：托管和构建上下文</span></a></h2><p>先克隆源代码以重新创建此项目。</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>$ git clone https://github.com/conan-io/examples2.git</span></span>
<span class="line"><span>$ cd examples2/tutorial/consuming_packages/cross_building</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>在前面的示例中，我们学习了如何使用conanfile.py或conanfile.txt构建一个使用Zlib和CMake Conan 包压缩字符串的应用程序。此外，我们还了解了可以在名为 Conan 配置文件的文件中设置操作系统、 编译器或构建配置等信息，还可以使用该配置文件作为参数(--profile)来调用<code>conan install</code>。 我们还了解不指定该配置文件相当于使用--profile=default参数。</p><p>对于所有这些示例，我们都使用相同的平台来构建和运行应用程序。但是，如果想在运行如Ubuntu Linux 的计算机上构建应用程序，然后在Raspberry Pi等其他平台上运行它，该怎么办？Conan可以使用 两个不同的配置文件来模拟这种情况，一个用于构建应用程序的机器（Ubuntu Linux）， 另一个用于运行应用程序的机器（Raspberry Pi）。我们将在下一节中解释这种“两个配置文件”方法。</p><h3 id="两种配置模型-构建配置和主机配置" tabindex="-1"><a class="header-anchor" href="#两种配置模型-构建配置和主机配置"><span>两种配置模型：构建配置和主机配置</span></a></h3><p>即使在调用Conan时仅指定一个--profile参数，Conan也会在内部使用两个配置文件。 一个用于构建二进制文件的机器（称为构建配置文件），另一个用于运行这些二进制文件的机器（称为主机配置文件）。 调用此命令：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> conan</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --build=missing</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --profile=someprofile</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>相当于：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> conan</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --build=missing</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --profile:host=someprofile</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --profile:build=default</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>使用了两个新参数：</p><ul><li><code>profile:host</code>: 这是定义构建的二进制文件将运行的平台的配置文件。对于我们的字符串压缩器应用程序， 此配置文件将应用于将在Raspberry Pi中运行的Zlib库。</li><li><code>profile:build</code>: 这是定义二进制文件构建平台的配置文件。对于我们的字符串压缩器应用程序， 此配置文件将是CMake工具使用的配置文件，该工具将在Ubuntu Linux机器上对其进行编译。</li></ul><p>当只使用一个参数时，配置文件--profile相当于--profile:host。如果不指定参数--profile:build， Conan将在内部使用默认配置文件。</p><p>因此，如果我们想在Ubuntu Linux机器中构建压缩器应用程序，但在Raspberry Pi中运行它， 我们应该使用两个不同的配置文件。对于构建机器，我们可以使用默认配置文件，它如下所示：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[settings]</span></span>
<span class="line"><span>os=Linux</span></span>
<span class="line"><span>arch=x86_64</span></span>
<span class="line"><span>build_type=Release</span></span>
<span class="line"><span>compiler=gcc</span></span>
<span class="line"><span>compiler.cppstd=gnu14</span></span>
<span class="line"><span>compiler.libcxx=libstdc++11</span></span>
<span class="line"><span>compiler.version=9</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>作为主机的 Raspberry Pi 的配置文件：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[settings]</span></span>
<span class="line"><span>os=Linux</span></span>
<span class="line"><span>arch=armv7hf</span></span>
<span class="line"><span>compiler=gcc</span></span>
<span class="line"><span>build_type=Release</span></span>
<span class="line"><span>compiler.cppstd=gnu14</span></span>
<span class="line"><span>compiler.libcxx=libstdc++11</span></span>
<span class="line"><span>compiler.version=9</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[buildenv]</span></span>
<span class="line"><span>CC=arm-linux-gnueabihf-gcc-9</span></span>
<span class="line"><span>CXX=arm-linux-gnueabihf-g++-9</span></span>
<span class="line"><span>LD=arm-linux-gnueabihf-ld</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中有一个名为<code>[buildenv]</code>的部分。此部分用于设置构建应用程序所需的环境变量。 在本例中，我们分别声明指向交叉构建工具链编译器和链接器、CC和CXX变量。 将此部分添加到配置文件中将在每次执行<code>conan install</code>时调用VirtualBuildEnv生成器。 此生成器会将该环境信息添加到我们在使用CMake构建之前要获取的脚本中，以便它可以使用交叉构建工具链。</p><h3 id="构建和主机上下文" tabindex="-1"><a class="header-anchor" href="#构建和主机上下文"><span>构建和主机上下文</span></a></h3><p>现在我们已经准备好了两个配置文件，让我们看一下conanfile.py：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>from conan import ConanFile</span></span>
<span class="line"><span>from conan.tools.cmake import cmake_layout</span></span>
<span class="line"><span></span></span>
<span class="line"><span>class CompressorRecipe(ConanFile):</span></span>
<span class="line"><span>    settings = &quot;os&quot;, &quot;compiler&quot;, &quot;build_type&quot;, &quot;arch&quot;</span></span>
<span class="line"><span>    generators = &quot;CMakeToolchain&quot;, &quot;CMakeDeps&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    def requirements(self):</span></span>
<span class="line"><span>        self.requires(&quot;zlib/1.2.11&quot;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    def build_requirements(self):</span></span>
<span class="line"><span>        self.tool_requires(&quot;cmake/3.22.6&quot;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    def layout(self):</span></span>
<span class="line"><span>        cmake_layout(self)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这实际上与我们在上一个示例中使用的conanfile.py相同。我们将需要zlib/1.2.11 作为常规依赖项， 并将cmake/3.22.6作为构建应用程序所需的工具。</p><p>我们需要使用交叉构建工具链为Raspberry Pi构建应用程序，并链接为同一平台构建的zlib/1.2.11库。 另一方面，我们需要cmake/3.22.6二进制文件在Ubuntu Linux中运行。Conan在依赖关系图中内部管理这一点， 区分我们所谓的<code>构建上下文</code>和<code>主机上下文</code>：</p><ul><li>主机上下文由根包（conan install或conan create命令中指定的包）及其通过添加的所有要求填充self.requires()。 在本例中，这包括压缩器应用程序和zlib/1.2.11依赖项。</li><li>构建上下文包含构建机器中使用的工具要求。此类别通常包括所有开发人员工具， 如 CMake、编译器和链接器。在本例中，这包括cmake/3.22.6工具。</li></ul><p>这些上下文定义了 Conan 如何管理每个依赖项。例如，由于 zlib/1.2.11属于主机上下文， 因此我们在raspberry配置文件（配置文件主机）中定义的构建环境在构建时仅适用于zlib/1.2.11 库， 不会影响属于构建上下文的任何内容，例如cmake/3.22.6依赖项。</p><p>现在，让我们构建应用程序。首先，使用构建和主机平台的配置文件调用<code>conan install</code>。 这将安装 为armv7hf架构构建的zlib/1.2.11依赖项和为64位架构运行的cmake/3.22.6版本。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> conan</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --build</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> missing</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -pr:b=default</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -pr:h=./profiles/raspberry</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>然后，让我们调用 CMake 来构建应用程序。正如我们在上一个示例中所做的那样，我们必须激活正在运行的构建环境。 这将设置定位交叉构建工具链和构建应用程序所需的环境变量。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> build</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> source</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Release/generators/conanbuild.sh</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Capturing</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> current</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> environment</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> in</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> deactivate_conanbuildenv-release-armv7hf.sh</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Configuring</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> environment</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> variables</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cmake</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ..</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -DCMAKE_TOOLCHAIN_FILE=Release/generators/conan_toolchain.cmake</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -DCMAKE_BUILD_TYPE=Release</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cmake</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --build</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">...</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">--</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Conan</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> toolchain:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> C++</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Standard</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 14</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> with</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> extensions</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ON</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">--</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> The</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> C</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> compiler</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> identification</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> is</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> GNU</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 9.4.0</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">--</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Detecting</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> C</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> compiler</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ABI</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> info</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">--</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Detecting</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> C</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> compiler</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ABI</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> info</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> done</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">--</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Check</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> for</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> working</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> C</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> compiler:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /usr/bin/arm-linux-gnueabihf-gcc-9</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> skipped</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">--</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Detecting</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> C</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> compile</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> features</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">--</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Detecting</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> C</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> compile</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> features</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> done</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    [100%] Built target compressor</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">...</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> source</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Release/generators/deactivate_conanbuild.sh</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以通过运行 Linux 实用程序来检查我们是否为正确的体系结构构建了应用程序：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> file</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> compressor</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">compressor:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ELF</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 32-bit</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> LSB</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> shared</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> object,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ARM,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> EABI5</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> version</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (SYSV), dynamically</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">linked,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> interpreter</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /lib/ld-linux-armhf.so.3,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">BuildID</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">sha1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">2a216076864a1b1f30211debf297ac37a9195196,</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> for</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> GNU/Linux</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 3.2.0,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> not</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">stripped</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="版本控制简介" tabindex="-1"><a class="header-anchor" href="#版本控制简介"><span>版本控制简介</span></a></h2><p>到目前为止，我们一直在使用固定版本的依赖，例如。但有时依赖项会有新版本会发布， 我们希望尽可能轻松地更新到这些版本。如requires = &quot;zlib/1.2.12&quot;。</p><p>始终可以编辑conanfiles并明确更新版本，但Conan中有机制允许进行此类更新，甚至无需修改配方。</p><h3 id="版本范围" tabindex="-1"><a class="header-anchor" href="#版本范围"><span>版本范围</span></a></h3><p><code>requires</code>可以使用语法来表达对给定包的某个版本范围的依赖关系pkgname/[version-range-expression]。 让我们看一个例子:</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>from conan import ConanFile</span></span>
<span class="line"><span></span></span>
<span class="line"><span>class CompressorRecipe(ConanFile):</span></span>
<span class="line"><span>    settings = &quot;os&quot;, &quot;compiler&quot;, &quot;build_type&quot;, &quot;arch&quot;</span></span>
<span class="line"><span>    generators = &quot;CMakeToolchain&quot;, &quot;CMakeDeps&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    def requirements(self):</span></span>
<span class="line"><span>        self.requires(&quot;zlib/[~1.2]&quot;)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中requires包含表达式zlib/[~1.2]，表示大约1.2版本，也就是说，它可以解析为任何zlib/1.2.8， zlib/1.2.11或zlib/1.2.12，但不会解析为 之类的东西zlib/1.3.0。 在可用的匹配版本中，版本范围将始终选择最新版本。</p><p>此外还可以使用zlib/[&lt;1.2.12]，这意味着我们想要使用低于的版本1.2.12，但该版本被排除在外， 因此满足范围的最新版本将是zlib/1.2.11：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>$ conan install .</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Resolved version ranges</span></span>
<span class="line"><span>    zlib/[&lt;1.2.12]: zlib/1.2.11</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这同样适用于其他类型的需求，例如tool_requires。如果我们现在将以下内容添加到配方中：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>from conan import ConanFile</span></span>
<span class="line"><span></span></span>
<span class="line"><span>class CompressorRecipe(ConanFile):</span></span>
<span class="line"><span>    settings = &quot;os&quot;, &quot;compiler&quot;, &quot;build_type&quot;, &quot;arch&quot;</span></span>
<span class="line"><span>    generators = &quot;CMakeToolchain&quot;, &quot;CMakeDeps&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    def requirements(self):</span></span>
<span class="line"><span>        self.requires(&quot;zlib/[~1.2]&quot;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    def build_requirements(self):</span></span>
<span class="line"><span>        self.tool_requires(&quot;cmake/[&gt;3.10]&quot;)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="修订" tabindex="-1"><a class="header-anchor" href="#修订"><span>修订</span></a></h3><p>如果软件包创建者对软件包配方或源代码做了一些更改，但没有修改version 以反映这些更改，会发生什么情况？ Conan 有一个内部机制来跟踪这些修改，它被称为修订版本。</p><p><code>pkgname/version#recipe_revision</code>配方修订是可以与包名称和版本一起以或形式看到的哈希值 <code>pkgname/version@user/channel#recipe_revision</code>。配方修订是配方内容和源代码的哈希值。 因此，如果配方、其关联文件或此配方打包的源代码中发生某些变化，它将创建新的配方修订。</p><p>您可以使用<code>conan list</code>命令列出现有修订：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>$ conan list &quot;zlib/1.2.12#*&quot; -r=conancenter</span></span>
<span class="line"><span>conancenter</span></span>
<span class="line"><span>  zlib</span></span>
<span class="line"><span>    zlib/1.2.12</span></span>
<span class="line"><span>      revisions</span></span>
<span class="line"><span>        82202701ea360c0863f1db5008067122 (2022-03-29 15:47:45 UTC)</span></span>
<span class="line"><span>        bd533fb124387a214816ab72c8d1df28 (2022-05-09 06:59:58 UTC)</span></span>
<span class="line"><span>        3b9e037ae1c615d045a06c67d88491ae (2022-05-13 13:55:39 UTC)</span></span>
<span class="line"><span>        ...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修订始终解析为最新（按创建或上传到服务器的时间顺序）修订。虽然这不是一种常见的做法， 但可以直接在中明确固定给定的配方修订，conanfile例如：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>def requirements(self):</span></span>
<span class="line"><span>    self.requires(&quot;zlib/1.2.12#87a7211557b6690ef5bf7fc599dd8349&quot;)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>然而，当创建新的修订版本时，这种机制的维护和更新会非常繁琐，因此在一般情况下，不应该这样做。</p><h3 id="锁文件" tabindex="-1"><a class="header-anchor" href="#锁文件"><span>锁文件</span></a></h3><p>版本范围的使用以及在不改变版本的情况下创建给定包的新修订版的可能性允许自动进行更快、更方便的更新，而无需编辑配方。</p><p>但在某些情况下，还需要提供一组不可变且可重现的依赖项。此过程称为<code>锁定</code>，实现它的机制是<code>lockfile</code>文件。 lockfile是一个包含固定依赖项列表的文件，指定确切的版本和确切的修订版本。 因此，例如，lockfile 永远不会包含带有表达式的版本范围，而只包含固定的依赖项。</p><p>锁文件可以看作是给定依赖关系图在某个时间点的快照。此类快照必须是“可实现的”，也就是说， 它需要是可以从conanfile配方中实际重现的状态。并且此锁文件可以在稍后的某个时间点用于强制执行相同的状态， 即使有新创建的包版本。</p><p>让我们看看 lockfiles 的实际作用。首先，让我们将依赖项固定到zlib/1.2.11我们的示例中：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>def requirements(self):</span></span>
<span class="line"><span>    self.requires(&quot;zlib/1.2.11&quot;)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们捕获一个锁文件：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>conan lock create .</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-------- Computing dependency graph ----------</span></span>
<span class="line"><span>Graph root</span></span>
<span class="line"><span>    conanfile.py: .../conanfile.py</span></span>
<span class="line"><span>Requirements</span></span>
<span class="line"><span>    zlib/1.2.11#4524fcdd41f33e8df88ece6e755a5dcc - Cache</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Generated lockfile: .../conan.lock</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们看看锁文件<code>conan.lock</code>包含什么：</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;version&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;0.5&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;requires&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &quot;zlib/1.2.11#4524fcdd41f33e8df88ece6e755a5dcc%1650538915.154&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ],</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;build_requires&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [],</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;python_requires&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: []</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，让我们恢复原来的requires版本范围：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>def requirements(self):</span></span>
<span class="line"><span>    self.requires(&quot;zlib/[~1.2]&quot;)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>并运行<code>conan install</code>，默认情况下它会找到<code>conan.lock</code>，并运行等效的<code>conan install . --lockfile=conan.lock</code>。</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>conan install .</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Graph root</span></span>
<span class="line"><span>    conanfile.py: .../conanfile.py</span></span>
<span class="line"><span>Requirements</span></span>
<span class="line"><span>    zlib/1.2.11#4524fcdd41f33e8df88ece6e755a5dcc - Cache</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，版本范围不再被解析，并且它不会获得zlib/1.2.12依赖关系，即使它是允许的范围zlib/[~1.2]， 因为conan.lock锁文件也强制它停留在zlib/1.2.11那个精确的修订版本中。</p>`,103),p=[l];function t(d,r){return n(),i("div",null,p)}const o=s(e,[["render",t],["__file","04.Conan使用包(二).html.vue"]]),k=JSON.parse('{"path":"/03.%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/Conan/04.Conan%E4%BD%BF%E7%94%A8%E5%8C%85(%E4%BA%8C).html","title":"Conan使用包(二)","lang":"zh-CN","frontmatter":{"title":"Conan使用包(二)","icon":"laptop-code","date":"2024-08-20T00:00:00.000Z","order":4,"category":["工具使用"],"tag":["Conan"],"description":"Conan使用包(二) 见官方文档。 使用conanfile.py与conanfile.txt的灵活性 在前面的示例中，我们在conanfile.txt文件中声明了依赖项（ Zlib和CMake） 。让我们看一下该文件： 使用conanfile.txt构建使用Conan的项目对于简单情况来说已经足够了，但如果需要更大的灵活性，则应使用 conanfil...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/03.%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/Conan/04.Conan%E4%BD%BF%E7%94%A8%E5%8C%85(%E4%BA%8C).html"}],["meta",{"property":"og:site_name","content":"Mr.Li"}],["meta",{"property":"og:title","content":"Conan使用包(二)"}],["meta",{"property":"og:description","content":"Conan使用包(二) 见官方文档。 使用conanfile.py与conanfile.txt的灵活性 在前面的示例中，我们在conanfile.txt文件中声明了依赖项（ Zlib和CMake） 。让我们看一下该文件： 使用conanfile.txt构建使用Conan的项目对于简单情况来说已经足够了，但如果需要更大的灵活性，则应使用 conanfil..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-19T06:54:19.000Z"}],["meta",{"property":"article:author","content":"Mr.Li"}],["meta",{"property":"article:tag","content":"Conan"}],["meta",{"property":"article:published_time","content":"2024-08-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-19T06:54:19.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Conan使用包(二)\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-08-20T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-19T06:54:19.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Li\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"使用conanfile.py与conanfile.txt的灵活性","slug":"使用conanfile-py与conanfile-txt的灵活性","link":"#使用conanfile-py与conanfile-txt的灵活性","children":[{"level":3,"title":"使用 layout() 方法","slug":"使用-layout-方法","link":"#使用-layout-方法","children":[]},{"level":3,"title":"使用validate（）方法对不支持的配置引发错误","slug":"使用validate-方法对不支持的配置引发错误","link":"#使用validate-方法对不支持的配置引发错误","children":[]},{"level":3,"title":"使用 conanfile.py 的条件要求","slug":"使用-conanfile-py-的条件要求","link":"#使用-conanfile-py-的条件要求","children":[]},{"level":3,"title":"使用 generate() 方法从包中复制资源","slug":"使用-generate-方法从包中复制资源","link":"#使用-generate-方法从包中复制资源","children":[]}]},{"level":2,"title":"如何使用Conan交叉编译应用程序：托管和构建上下文","slug":"如何使用conan交叉编译应用程序-托管和构建上下文","link":"#如何使用conan交叉编译应用程序-托管和构建上下文","children":[{"level":3,"title":"两种配置模型：构建配置和主机配置","slug":"两种配置模型-构建配置和主机配置","link":"#两种配置模型-构建配置和主机配置","children":[]},{"level":3,"title":"构建和主机上下文","slug":"构建和主机上下文","link":"#构建和主机上下文","children":[]}]},{"level":2,"title":"版本控制简介","slug":"版本控制简介","link":"#版本控制简介","children":[{"level":3,"title":"版本范围","slug":"版本范围","link":"#版本范围","children":[]},{"level":3,"title":"修订","slug":"修订","link":"#修订","children":[]},{"level":3,"title":"锁文件","slug":"锁文件","link":"#锁文件","children":[]}]}],"git":{"createdTime":1726728859000,"updatedTime":1726728859000,"contributors":[{"name":"lyw","email":"806555632@qq.com","commits":1}]},"readingTime":{"minutes":15.25,"words":4575},"filePathRelative":"03.工具使用/Conan/04.Conan使用包(二).md","localizedDate":"2024年8月20日","excerpt":"\\n<p>见<a href=\\"https://docs.conan.io/2/tutorial/consuming_packages.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">官方文档</a>。</p>\\n<h2>使用conanfile.py与conanfile.txt的灵活性</h2>\\n<p>在前面的示例中，我们在conanfile.txt文件中声明了依赖项（ Zlib和CMake） 。让我们看一下该文件：</p>\\n<div class=\\"language-text line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"text\\" data-title=\\"text\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>[requires]</span></span>\\n<span class=\\"line\\"><span>zlib/1.2.11</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>[tool_requires]</span></span>\\n<span class=\\"line\\"><span>cmake/3.22.6</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>[generators]</span></span>\\n<span class=\\"line\\"><span>CMakeDeps</span></span>\\n<span class=\\"line\\"><span>CMakeToolchain</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{o as comp,k as data};
