import{_ as e}from"./type-of-cache-BDAguZOA.js";import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o as a,b as s}from"./app-DzPe9QHO.js";const n="/assets/images/cache-sequence-1.svg",o="/assets/images/cache-sequence-2.svg",l="/assets/images/resume-download-1.svg",p="/assets/images/resume-download-2.svg",r="/assets/images/resume-download-3.svg",c="/assets/images/resume-download-4.svg",g="/assets/images/optimistic-locking-1.svg",h="/assets/images/optimistic-locking-2.svg",d="/assets/images/optimistic-locking-3.svg",m="/assets/images/first-upload.svg",f={},u=s('<h1 id="http条件请求" tabindex="-1"><a class="header-anchor" href="#http条件请求"><span>HTTP条件请求</span></a></h1><p>在 HTTP 中有一个条件请求的概念，在这类请求中，请求的结果，甚至请求成功的状态， 都会随着验证器与受影响资源的比较结果的变化而变化。这类请求可以用来验证缓存的有效性， 省去不必要的控制手段，以及验证文件的完整性， 例如在断点续传的场景下或者在上传或者修改服务器端的文件的时候避免更新丢失问题。</p><h2 id="基本原理" tabindex="-1"><a class="header-anchor" href="#基本原理"><span>基本原理</span></a></h2><p>在 HTTP 协议中，条件请求指的是请求的执行结果会因特定首部的值不同而不同。 这些首部规定了请求的前置条件，请求结果则视条件匹配与否而有所不同。</p><p>请求引发的不同的反应取决于请求所使用的方法，以及组成前置条件首部集合：</p><ul><li>对于安全方法来说，例如 GET，通常用来获取文件，条件请求可以被用来限定仅在满足条件的情况下返回文件。 这样可以节省带宽。</li><li>对于非安全方法来说，例如 PUT 方法，通常用来上传文件， 条件请求可以被用来限定仅在满足文件的初始版本与服务器上的版本相同的条件下才会将其上传。</li></ul><h2 id="验证器" tabindex="-1"><a class="header-anchor" href="#验证器"><span>验证器</span></a></h2><p>所有的条件请求首部都是试图去检测服务器上存储的资源是否与某一特定版本相匹配。为了达到这个目的， 条件请求需要指明资源的版本。由于逐个字节去比较完整资源是不切实际的，况且这也并非总是想要的结果， 所以在请求中会传递一个描述资源版本的值。这些值称为“验证器”，并且分为两大类：</p><ul><li>文件的最后修改时间，即 last-modified（最后修改）时间。</li><li>一个意义模糊的字符串，指代一个独一无二的版本，称为“实体标签”，或者 etag。</li></ul><p>比较同一份资源的不同版本有一定的技巧性：取决于上下文环境的不同，有两种不同的等值检查（equality checks）类型：</p><ul><li>强验证类型（Strong validation）应用于需要逐个字节相对应的情况，例如需要进行断点续传的时候。</li><li>弱验证类型（Weak validation）应用于用户代理只需要确认资源内容相同即可。即便是有细微差别也可以接受， 比如显示的广告不同，或者是页脚的时间不同。</li></ul><p>验证类型与验证器的类型是相互独立的。 Last-Modified 和 ETag 首部均可应用于两种验证类型， 尽管在服务器端实现的复杂程度可能会有所不同。HTTP 协议默认使用强验证类型，可以指定何时使用弱验证类型。</p><h3 id="强验证类型" tabindex="-1"><a class="header-anchor" href="#强验证类型"><span>强验证类型</span></a></h3><p>强验证类型的作用在于确保要比较的资源与其相比较的对象之间每一个字节都相同。 对于有些首部来说需要明确指定该验证类型，而对于另外一些来说则是默认值就是强验证类型。 强验证类型的要求相当严格，在服务器层面来说可能较难保证。但是它确保了数据在任何时候都没有缺损， 有时候则需要以牺牲性能为代价。</p><p>使用 Last-Modified 首部很难为强验证类型提供一个唯一标识。通常这是由 ETag 首部来完成的， 该首部可以提供使用 MD5 算法获取的资源（或其衍生品）的散列值。</p><h3 id="弱验证类型" tabindex="-1"><a class="header-anchor" href="#弱验证类型"><span>弱验证类型</span></a></h3><p>弱验证类型与强验证类型不同，因为它会把内容相同的两份文件看做是一样的。例如， 使用弱验证类型，一个页面与另外一个页面只是在页脚显示的时间上有所不同，或者是展示的广告不相同， 那么就会被认为是相同的。但是在使用强验证的情况下，二者是不同的。构建应用于弱验证类型的标签 （etag）体系可能会比较复杂，因为这会涉及到对页面上不同的元素的重要性进行排序， 但是会对缓存性能优化相当有帮助。</p><h2 id="条件首部" tabindex="-1"><a class="header-anchor" href="#条件首部"><span>条件首部</span></a></h2><ul><li>If-Match</li><li>If-None-Match</li><li>If-Modified-Since</li><li>If-Unmodified-Since</li><li>If-Range</li></ul><h2 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span>应用场景</span></a></h2><h3 id="缓存更新" tabindex="-1"><a class="header-anchor" href="#缓存更新"><span>缓存更新</span></a></h3><p>条件式请求最常见的应用场景是更新缓存。假如缓存为空，或者是没有缓存的话，被请求资源会以状态码 200 OK 返回。</p><figure><img src="'+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>验证器会同资源一起返回，它们出现在首部字段中。在这个例子中， Last-Modified 与 ETag 都被返回， 不过如果只返回其中的一个也是可以的。这些验证器会同资源一起被缓存起来（与所有的首部一样）， 并在在缓存失效的时候用来发起条件式请求。</p><p>只要缓存未失效，就不会发起任何请求。但是一旦失效——主要是由 Cache-Control 首部控制—— 客户端就不会采用缓存值而是发起条件式请求。验证器的值会用作 If-Modified-Since 和 If-None-Match 首部字段的参数。</p><p>假如资源未发生变化，服务器就返回状态码为 304 Not Modified 的响应。 这样相当于对缓存资源进行了刷新，而客户端则采用被缓存的资源。 尽管这里有一次请求/响应往返会消耗一定的资源，但是这样做比将整个资源通过网络再传输一遍更高效。</p><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>假如资源发生了变化，服务器就直接返回 200 OK 响应码，连同新版本的资源，就像是没有应用条件式请求一样； 客户端则采用新版本资源（并将其缓存起来）。</p><figure><img src="'+e+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>除了需要在服务器端对验证器进行设置以外，该机制是透明的：所有的浏览器都会对缓存资源进行管理， 在不需要 Web 开发者进行任何特殊处理的情况下发送条件式请求。</p><h3 id="增量下载的完整性" tabindex="-1"><a class="header-anchor" href="#增量下载的完整性"><span>增量下载的完整性</span></a></h3><p>文件的增量下载是 HTTP 协议规定的一项功能，它允许恢复先前的操作，通过保存先前已经获得的信息来节省带宽和时间：</p><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>支持增量下载的服务器会通过 Accept-Ranges 首部来广播这项能力。此后客户端就可以通过发送 Ranges 首部字段以及缺失的范围值来进行断点续传了：</p><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>基本原理很简单，但是这里有一个潜在的问题：如果要下载的资源在两次下载之间进行了修改， 得到的数据范围就会对应该资源的两个不同的版本，那么最终获得的文件是损坏的。</p><p>为了防止这种情况的发生，需要使用条件式请求。对于范围请求来说，有两种方法可以实现这个目的。 更灵活一些的方法是使用 If-Modified-Since 和 If-Match 首部，假如前置条件失败， 服务器端会返回错误提示，然后客户端可以从头开始重新下载资源：</p><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>尽管这种方法行得通，但是它在文件发生变化的情况下增加了一次额外的请求/响应往返。 这一点会影响性能。为此 HTTP 协议规定了一个特定的首部——If-Range——来避免这种情况的发生：</p><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>该方法更高效，但是缺乏一定的灵活性，因为条件值只能是实体标签。不过这种额外的灵活性很少会需要。</p><h3 id="使用乐观锁避免更新丢失问题" tabindex="-1"><a class="header-anchor" href="#使用乐观锁避免更新丢失问题"><span>使用乐观锁避免更新丢失问题</span></a></h3><p>对于 Web 应用的一项常见操作是远程更新文件。这在各种类型的文件系统以及版本控制软件中都很常见， 但是任何允许远程存储资源的软件也都需要这样一个乐观锁机制。常见的 Web 站点， 例如 wiki 系统或其他类型的内容管理系统（CMS），都存在这样的需求。</p><p>使用 PUT 方法可以实现上述机制。客户端首先读取原始文件，然后进行修改，最后将它们推送到服务器上：</p><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>不幸的是，当把并发情况考虑在内的时候，事情变得有些不那么确定。当一个客户端在本地修改它新获得的资源副本的时候， 另外一个客户端同样可以获取一份资源副本并进行同样的操作。接下来要发生的事情就不那么顺利了： 当二者提交回服务器的时候，前一个客户端作出的修改会被第二个客户端的推送所覆盖， 因为第二个客户端对于第一个客户端做出的修改一无所知。最终的结果则取决于获胜的一方， 但是该结果不会通知给另一方。哪一个客户端作出的修改将会被保存下来，会由于它们提交的速度而有所不同； 提交的速度则依赖于客户端及服务器端的性能，甚至是使用客户端进行编辑的人的表现。 每一次的胜出者都会有所不同。这种情况被称作竞态条件，会导致难以捉摸的情况的发生， 并且难以探测和除错：</p><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>不存在解决这一问题而不打扰双方某一方的办法。然而，更新丢失问题以及竞态条件是需要避免的。 我们希望获得可预测的结果，并且希望在更新操作被拒绝的时候客户端可以得到反馈。</p><p>条件式请求可以被用在<strong>乐观锁算法</strong>（大多数 wiki 系统和版本管理系统采用的是该算法）的实现上。 其思路是，允许所有的客户端获得资源的副本，然后在本地进行编辑， 通过只允许第一个客户端成功提交的方式来控制并发操作。其余的基于现今已过期版本的更新操作都会被拒绝：</p><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这种方式的实现需要用到 If-Match 或 If-Unmodified-Since 首部。 假如实体标签与源头文件的实体标签不一致，或者源头文件在被获取副本之后经过了修改， 那么此次变更请求就会被拒绝，收到 <code>412 Precondition Failed</code> 的错误提示。 之后就需要依靠客户端来处理该错误了：或者通知用户重新开始（基于最新的版本）， 或者是给用户展示两个版本之间的差异，辅助他们决定要保留哪些变更(Git)。</p><h3 id="处理资源的首次上传问题" tabindex="-1"><a class="header-anchor" href="#处理资源的首次上传问题"><span>处理资源的首次上传问题</span></a></h3><p>资源的首次上传问题是前面所描述的情况的一个极端情况。与任何资源更新问题一样， 当两个客户端在大致相同的时间进行上传操作的时候，就会遇到竞态条件。 为了防止这种情况的发生，可以使用条件式请求：添加 If-None-Match 首部， 并将其值设置为 &#39;*&#39;, 表示任意实体标签。 当且仅当资源先前并不存在的情况下请求的操作才会成功执行：</p><figure><img src="'+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>条件式请求是 HTTP 协议中一项非常重要的特性，它使高效复杂的应用系统的构建得以实现。 对于缓存或断点续传功能来说，站点管理员只需要正确配置服务器就可以了； 在某些环境中设置正确的实体标签可能需要一些技巧。 但一旦设置成功，浏览器就能够按照预期地发送条件式请求。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Conditional_requests" target="_blank" rel="noopener noreferrer">MDN Web Docs 社区</a></p>',58),T=[u];function _(b,P){return a(),t("div",null,T)}const x=i(f,[["render",_],["__file","05.HTTP条件请求.html.vue"]]),k=JSON.parse('{"path":"/05.Web%E6%8A%80%E6%9C%AF/HTTP/03.HTTP%E8%BF%9B%E9%98%B6/05.HTTP%E6%9D%A1%E4%BB%B6%E8%AF%B7%E6%B1%82.html","title":"HTTP条件请求","lang":"zh-CN","frontmatter":{"title":"HTTP条件请求","icon":"laptop-code","date":"2024-08-20T00:00:00.000Z","order":5,"category":["计算机网络"],"tag":["HTTP"],"description":"HTTP条件请求 在 HTTP 中有一个条件请求的概念，在这类请求中，请求的结果，甚至请求成功的状态， 都会随着验证器与受影响资源的比较结果的变化而变化。这类请求可以用来验证缓存的有效性， 省去不必要的控制手段，以及验证文件的完整性， 例如在断点续传的场景下或者在上传或者修改服务器端的文件的时候避免更新丢失问题。 基本原理 在 HTTP 协议中，条件请...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/05.Web%E6%8A%80%E6%9C%AF/HTTP/03.HTTP%E8%BF%9B%E9%98%B6/05.HTTP%E6%9D%A1%E4%BB%B6%E8%AF%B7%E6%B1%82.html"}],["meta",{"property":"og:site_name","content":"Mr.Li"}],["meta",{"property":"og:title","content":"HTTP条件请求"}],["meta",{"property":"og:description","content":"HTTP条件请求 在 HTTP 中有一个条件请求的概念，在这类请求中，请求的结果，甚至请求成功的状态， 都会随着验证器与受影响资源的比较结果的变化而变化。这类请求可以用来验证缓存的有效性， 省去不必要的控制手段，以及验证文件的完整性， 例如在断点续传的场景下或者在上传或者修改服务器端的文件的时候避免更新丢失问题。 基本原理 在 HTTP 协议中，条件请..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/assets/images/cache-sequence-1.svg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-27T07:21:04.000Z"}],["meta",{"property":"article:author","content":"Mr.Li"}],["meta",{"property":"article:tag","content":"HTTP"}],["meta",{"property":"article:published_time","content":"2024-08-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-27T07:21:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"HTTP条件请求\\",\\"image\\":[\\"https://mister-hope.github.io/assets/images/cache-sequence-1.svg\\",\\"https://mister-hope.github.io/assets/images/cache-sequence-2.svg\\",\\"https://mister-hope.github.io/assets/images/type-of-cache.png\\",\\"https://mister-hope.github.io/assets/images/resume-download-1.svg\\",\\"https://mister-hope.github.io/assets/images/resume-download-2.svg\\",\\"https://mister-hope.github.io/assets/images/resume-download-3.svg\\",\\"https://mister-hope.github.io/assets/images/resume-download-4.svg\\",\\"https://mister-hope.github.io/assets/images/optimistic-locking-1.svg\\",\\"https://mister-hope.github.io/assets/images/optimistic-locking-2.svg\\",\\"https://mister-hope.github.io/assets/images/optimistic-locking-3.svg\\",\\"https://mister-hope.github.io/assets/images/first-upload.svg\\"],\\"datePublished\\":\\"2024-08-20T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-27T07:21:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Li\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"基本原理","slug":"基本原理","link":"#基本原理","children":[]},{"level":2,"title":"验证器","slug":"验证器","link":"#验证器","children":[{"level":3,"title":"强验证类型","slug":"强验证类型","link":"#强验证类型","children":[]},{"level":3,"title":"弱验证类型","slug":"弱验证类型","link":"#弱验证类型","children":[]}]},{"level":2,"title":"条件首部","slug":"条件首部","link":"#条件首部","children":[]},{"level":2,"title":"应用场景","slug":"应用场景","link":"#应用场景","children":[{"level":3,"title":"缓存更新","slug":"缓存更新","link":"#缓存更新","children":[]},{"level":3,"title":"增量下载的完整性","slug":"增量下载的完整性","link":"#增量下载的完整性","children":[]},{"level":3,"title":"使用乐观锁避免更新丢失问题","slug":"使用乐观锁避免更新丢失问题","link":"#使用乐观锁避免更新丢失问题","children":[]},{"level":3,"title":"处理资源的首次上传问题","slug":"处理资源的首次上传问题","link":"#处理资源的首次上传问题","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1724743264000,"updatedTime":1724743264000,"contributors":[{"name":"lyw","email":"806555632@qq.com","commits":1}]},"readingTime":{"minutes":10.39,"words":3116},"filePathRelative":"05.Web技术/HTTP/03.HTTP进阶/05.HTTP条件请求.md","localizedDate":"2024年8月20日","excerpt":"\\n<p>在 HTTP 中有一个条件请求的概念，在这类请求中，请求的结果，甚至请求成功的状态，\\n都会随着验证器与受影响资源的比较结果的变化而变化。这类请求可以用来验证缓存的有效性，\\n省去不必要的控制手段，以及验证文件的完整性，\\n例如在断点续传的场景下或者在上传或者修改服务器端的文件的时候避免更新丢失问题。</p>\\n<h2>基本原理</h2>\\n<p>在 HTTP 协议中，条件请求指的是请求的执行结果会因特定首部的值不同而不同。\\n这些首部规定了请求的前置条件，请求结果则视条件匹配与否而有所不同。</p>\\n<p>请求引发的不同的反应取决于请求所使用的方法，以及组成前置条件首部集合：</p>\\n<ul>\\n<li>对于安全方法来说，例如 GET，通常用来获取文件，条件请求可以被用来限定仅在满足条件的情况下返回文件。\\n这样可以节省带宽。</li>\\n<li>对于非安全方法来说，例如 PUT 方法，通常用来上传文件，\\n条件请求可以被用来限定仅在满足文件的初始版本与服务器上的版本相同的条件下才会将其上传。</li>\\n</ul>","autoDesc":true}');export{x as comp,k as data};
