import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,o as t,b as s}from"./app-B18flpjG.js";const a={},n=s(`<h1 id="协议升级机制" tabindex="-1"><a class="header-anchor" href="#协议升级机制"><span>协议升级机制</span></a></h1><p>HTTP/1.1 协议提供了一种使用 Upgrade 标头字段的特殊机制，允许将一个已建立的连接升级成新的、不相容的协议。</p><ul><li>可选的，并不强制更改（总是由客户端发起的）</li><li>主要用于引导 WebSocket 连接</li><li>HTTP/2明确禁止使用此机制，只属于 HTTP/1.1</li></ul><h2 id="升级http-1-1连接" tabindex="-1"><a class="header-anchor" href="#升级http-1-1连接"><span>升级HTTP/1.1连接</span></a></h2><p>客户端使用 Upgrade 标头字段请求服务器，以降序优先的顺序切换到其中列出的一个协议。</p><p>因为 Upgrade 是一个逐跳（Hop-by-hop）标头，它还需要在 Connection 标头字段中列出。 这意味着包含 Upgrade 的典型请求类似于：</p><div class="language-http line-numbers-mode" data-highlighter="shiki" data-ext="http" data-title="http" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">GET</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /index.html </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">HTTP</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1.1</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Host</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> www.example.com</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Connection</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> upgrade</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Upgrade</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> example/1, foo/2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据之前的请求的协议，可能需要其他标头信息，例如：从 HTTP/1.1 升级到 WebSocket 允许配置有关 WebSocket 连接的标头详细信息，以及在连接时提供一定程度的安全性。</p><p>如果服务器决定升级这次连接，就会返回一个 101 Switching Protocols 响应状态码， 和一个要切换到的协议的标头字段 Upgrade。如果服务器没有（或者不能）升级这次连接， 它会忽略客户端发送的 Upgrade 标头字段，返回一个常规的响应：例如一个 200 OK)。</p><p>在发送 101 状态码之后，服务器可以使用新协议，并根据需要执行任何额外的特定于协议的握手。 实际上，一旦这次升级完成了，连接就变成了双向管道。并且可以通过新协议完成启动升级的请求。</p><h2 id="升级的常用场合" tabindex="-1"><a class="header-anchor" href="#升级的常用场合"><span>升级的常用场合</span></a></h2><h3 id="升级到websocket的连接" tabindex="-1"><a class="header-anchor" href="#升级到websocket的连接"><span>升级到websocket的连接</span></a></h3><p>最经常会需要升级一个 HTTP 连接的场合就是使用 WebSocket，它总是通过升级 HTTP 或 HTTPS 连接来实现。请记住，当你用 WebSocket API 以及其他大部分实现 WebSocket 的库去建立新的连接时，基本上都不用操心升级的过程， 因为这些 API 已经实现了这一步。比如，用如下 API 打开一个 WebSocket 连接：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">webSocket</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> WebSocket</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;ws://destination.server.ext&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;optionalProtocol&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>WebSocket()</code>构造函数已经自动完成了发送初始 HTTP/1.1 连接的所有工作，然后为你处理握手及升级过程。</p><h3 id="websocket专有的标头" tabindex="-1"><a class="header-anchor" href="#websocket专有的标头"><span>WebSocket专有的标头</span></a></h3><ul><li>Sec-WebSocket-Extensions</li><li>Sec-WebSocket-Key</li><li>Sec-WebSocket-Protocol</li><li>Sec-WebSocket-Version</li><li>Sec-WebSocket-Accept</li></ul><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Protocol_upgrade_mechanism" target="_blank" rel="noopener noreferrer">MDN Web Docs 社区</a></p>`,19),l=[n];function p(r,h){return t(),i("div",null,l)}const d=e(a,[["render",p],["__file","06.协议升级机制.html.vue"]]),k=JSON.parse('{"path":"/05.Web%E6%8A%80%E6%9C%AF/HTTP/02.HTTP%E6%8C%87%E5%8D%97/06.%E5%8D%8F%E8%AE%AE%E5%8D%87%E7%BA%A7%E6%9C%BA%E5%88%B6.html","title":"协议升级机制","lang":"zh-CN","frontmatter":{"title":"协议升级机制","icon":"laptop-code","date":"2024-08-15T00:00:00.000Z","order":6,"category":["计算机网络"],"tag":["HTTP"],"description":"协议升级机制 HTTP/1.1 协议提供了一种使用 Upgrade 标头字段的特殊机制，允许将一个已建立的连接升级成新的、不相容的协议。 可选的，并不强制更改（总是由客户端发起的） 主要用于引导 WebSocket 连接 HTTP/2明确禁止使用此机制，只属于 HTTP/1.1 升级HTTP/1.1连接 客户端使用 Upgrade 标头字段请求服务器，...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/05.Web%E6%8A%80%E6%9C%AF/HTTP/02.HTTP%E6%8C%87%E5%8D%97/06.%E5%8D%8F%E8%AE%AE%E5%8D%87%E7%BA%A7%E6%9C%BA%E5%88%B6.html"}],["meta",{"property":"og:site_name","content":"Mr.Li"}],["meta",{"property":"og:title","content":"协议升级机制"}],["meta",{"property":"og:description","content":"协议升级机制 HTTP/1.1 协议提供了一种使用 Upgrade 标头字段的特殊机制，允许将一个已建立的连接升级成新的、不相容的协议。 可选的，并不强制更改（总是由客户端发起的） 主要用于引导 WebSocket 连接 HTTP/2明确禁止使用此机制，只属于 HTTP/1.1 升级HTTP/1.1连接 客户端使用 Upgrade 标头字段请求服务器，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-27T07:21:04.000Z"}],["meta",{"property":"article:author","content":"Mr.Li"}],["meta",{"property":"article:tag","content":"HTTP"}],["meta",{"property":"article:published_time","content":"2024-08-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-27T07:21:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"协议升级机制\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-08-15T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-27T07:21:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Li\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"升级HTTP/1.1连接","slug":"升级http-1-1连接","link":"#升级http-1-1连接","children":[]},{"level":2,"title":"升级的常用场合","slug":"升级的常用场合","link":"#升级的常用场合","children":[{"level":3,"title":"升级到websocket的连接","slug":"升级到websocket的连接","link":"#升级到websocket的连接","children":[]},{"level":3,"title":"WebSocket专有的标头","slug":"websocket专有的标头","link":"#websocket专有的标头","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1724743264000,"updatedTime":1724743264000,"contributors":[{"name":"lyw","email":"806555632@qq.com","commits":1}]},"readingTime":{"minutes":2.1,"words":629},"filePathRelative":"05.Web技术/HTTP/02.HTTP指南/06.协议升级机制.md","localizedDate":"2024年8月15日","excerpt":"\\n<p>HTTP/1.1 协议提供了一种使用 Upgrade 标头字段的特殊机制，允许将一个已建立的连接升级成新的、不相容的协议。</p>\\n<ul>\\n<li>可选的，并不强制更改（总是由客户端发起的）</li>\\n<li>主要用于引导 WebSocket 连接</li>\\n<li>HTTP/2明确禁止使用此机制，只属于 HTTP/1.1</li>\\n</ul>\\n<h2>升级HTTP/1.1连接</h2>\\n<p>客户端使用 Upgrade 标头字段请求服务器，以降序优先的顺序切换到其中列出的一个协议。</p>\\n<p>因为 Upgrade 是一个逐跳（Hop-by-hop）标头，它还需要在 Connection 标头字段中列出。\\n这意味着包含 Upgrade 的典型请求类似于：</p>","autoDesc":true}');export{d as comp,k as data};
