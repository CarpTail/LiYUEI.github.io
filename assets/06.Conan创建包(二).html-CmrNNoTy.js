import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,b as e,o as i}from"./app-8WpY_j4n.js";const l={};function p(t,n){return i(),s("div",null,n[0]||(n[0]=[e(`<h1 id="conan创建包-二" tabindex="-1"><a class="header-anchor" href="#conan创建包-二"><span>Conan创建包(二)</span></a></h1><p>见<a href="https://docs.conan.io/2/tutorial/creating_packages.html" target="_blank" rel="noopener noreferrer">官方文档</a>。</p><p>本节介绍如何使用Conan配方创建Conan包。我们首先创建一个基本的Conan配方来打包一个简单的C++库， 可以使用conan new命令来构建该库。然后，可以在Conan配方中定义的不同方法以及可以在其中执行的操作：</p><ul><li>使用<code>source()</code>方法从外部存储库检索源并对这些源应用补丁。</li><li>在方法内部向Conan包添加需求<code>requirements()</code>。</li><li>使用<code>generate()</code>方法准备包构建，并定制工具链。</li><li>配置<code>configure()</code>和<code>config_options()</code>方法中的设置和选项以及它们如何影响包的二进制兼容性。</li><li>使用<code>build()</code>方法定制构建过程并启动打包的库的测试。</li><li>使用<code>package()</code>方法选择将包含在Conan包中的文件。</li><li>在方法中定义包信息<code>package_info()</code>，可以被使用。</li><li>使用<code>test_package</code>测试Conan包是否可以正确使用。</li></ul><h2 id="创建一个-conan-包" tabindex="-1"><a class="header-anchor" href="#创建一个-conan-包"><span>创建一个 Conan 包</span></a></h2><p>使用<code>conan new</code>命令创建一个“Hello World” C++ 库示例项目：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> conan</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> new</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cmake_lib</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> name=hello</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> version=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1.0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这将创建一个具有以下结构的 Conan 包项目。</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>.</span></span>
<span class="line"><span>├── CMakeLists.txt</span></span>
<span class="line"><span>├── conanfile.py</span></span>
<span class="line"><span>├── include</span></span>
<span class="line"><span>│   └── hello.h</span></span>
<span class="line"><span>├── src</span></span>
<span class="line"><span>│   └── hello.cpp</span></span>
<span class="line"><span>└── test_package</span></span>
<span class="line"><span>    ├── CMakeLists.txt</span></span>
<span class="line"><span>    ├── conanfile.py</span></span>
<span class="line"><span>    └── src</span></span>
<span class="line"><span>        └── example.cpp</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生成的文件为：</p><ul><li><strong>conanfile.py</strong>：在根文件夹中，有一个conanfile.py，它是主配方文件，负责定义如何构建和使用包。</li><li><strong>CMakeLists.txt</strong>：一个简单的通用CMakeLists.txt，其中没有关于Conan的具体内容。</li><li><strong>src</strong>和<strong>include</strong>文件夹：包含简单 C++“hello”库的文件夹。</li><li><strong>test_package</strong>文件夹：包含一个示例应用程序，它将需要并与创建的包链接。它不是必需的， 但它对于检查我们的包是否正确创建很有用。</li></ul><p>包配方conanfile.py如下：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>from conan import ConanFile</span></span>
<span class="line"><span>from conan.tools.cmake import CMakeToolchain, CMake, cmake_layout, CMakeDeps</span></span>
<span class="line"><span></span></span>
<span class="line"><span>class helloRecipe(ConanFile):</span></span>
<span class="line"><span>    name = &quot;hello&quot;</span></span>
<span class="line"><span>    version = &quot;1.0&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    # Optional metadata</span></span>
<span class="line"><span>    license = &quot;&lt;Put the package license here&gt;&quot;</span></span>
<span class="line"><span>    author = &quot;&lt;Put your name here&gt; &lt;And your email here&gt;&quot;</span></span>
<span class="line"><span>    url = &quot;&lt;Package recipe repository url here, for issues about the package&gt;&quot;</span></span>
<span class="line"><span>    description = &quot;&lt;Description of hello package here&gt;&quot;</span></span>
<span class="line"><span>    topics = (&quot;&lt;Put some tag here&gt;&quot;, &quot;&lt;here&gt;&quot;, &quot;&lt;and here&gt;&quot;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    # Binary configuration</span></span>
<span class="line"><span>    settings = &quot;os&quot;, &quot;compiler&quot;, &quot;build_type&quot;, &quot;arch&quot;</span></span>
<span class="line"><span>    options = {&quot;shared&quot;: [True, False], &quot;fPIC&quot;: [True, False]}</span></span>
<span class="line"><span>    default_options = {&quot;shared&quot;: False, &quot;fPIC&quot;: True}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    # Sources are located in the same place as this recipe, copy them to the recipe</span></span>
<span class="line"><span>    exports_sources = &quot;CMakeLists.txt&quot;, &quot;src/*&quot;, &quot;include/*&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    def config_options(self):</span></span>
<span class="line"><span>        if self.settings.os == &quot;Windows&quot;:</span></span>
<span class="line"><span>            del self.options.fPIC</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    def layout(self):</span></span>
<span class="line"><span>        cmake_layout(self)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    def generate(self):</span></span>
<span class="line"><span>        deps = CMakeDeps(self)</span></span>
<span class="line"><span>        deps.generate()</span></span>
<span class="line"><span>        tc = CMakeToolchain(self)</span></span>
<span class="line"><span>        tc.generate()</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    def build(self):</span></span>
<span class="line"><span>        cmake = CMake(self)</span></span>
<span class="line"><span>        cmake.configure()</span></span>
<span class="line"><span>        cmake.build()</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    def package(self):</span></span>
<span class="line"><span>        cmake = CMake(self)</span></span>
<span class="line"><span>        cmake.install()</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    def package_info(self):</span></span>
<span class="line"><span>        self.cpp_info.libs = [&quot;hello&quot;]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，可以看到定义的 Conan 包的名称和版本：</p><ul><li><code>name</code>: 一个字符串，最少 2 个小写字符，最多 100 个小写字符，用于定义包名称。它应以字母数字或下划线开头， 可以包含字母数字、下划线、+、.、- 字符。</li><li><code>version</code>: 它是一个字符串，可以取任意值，与属性匹配相同的约束name。如果版本遵循形式为的语义版本控制 X.Y.Z-pre1+build2， 则该值可用于通过版本范围而不是精确版本来要求此包。</li></ul><p>一些属性定义了元数据，如<code>description</code>。这些是可选的，它们定义了诸如包的简称、打包库的author、 license、包存储库url的以及包topics相关的之类的内容。</p><p>之后，是一个与二进制配置相关的部分。此部分定义了包的有效设置和选项。正如我们在使用包部分中解释的那样：</p><h2 id="处理包中的源" tabindex="-1"><a class="header-anchor" href="#处理包中的源"><span>处理包中的源</span></a></h2><h2 id="向包中添加依赖项" tabindex="-1"><a class="header-anchor" href="#向包中添加依赖项"><span>向包中添加依赖项</span></a></h2><h2 id="准备构建" tabindex="-1"><a class="header-anchor" href="#准备构建"><span>准备构建</span></a></h2><h2 id="配置配方中的设置和选项" tabindex="-1"><a class="header-anchor" href="#配置配方中的设置和选项"><span>配置配方中的设置和选项</span></a></h2><h2 id="构建包-build-方法" tabindex="-1"><a class="header-anchor" href="#构建包-build-方法"><span>构建包：build()方法</span></a></h2><h2 id="包文件-package-方法" tabindex="-1"><a class="header-anchor" href="#包文件-package-方法"><span>包文件：package()方法</span></a></h2><h2 id="为调用者定义信息-package-info-方法" tabindex="-1"><a class="header-anchor" href="#为调用者定义信息-package-info-方法"><span>为调用者定义信息：package_info()方法</span></a></h2><h2 id="测试conan包" tabindex="-1"><a class="header-anchor" href="#测试conan包"><span>测试Conan包</span></a></h2><h2 id="其他类型的包" tabindex="-1"><a class="header-anchor" href="#其他类型的包"><span>其他类型的包</span></a></h2><h3 id="仅标头的包" tabindex="-1"><a class="header-anchor" href="#仅标头的包"><span>仅标头的包</span></a></h3><h3 id="打包预构建的二进制文件" tabindex="-1"><a class="header-anchor" href="#打包预构建的二进制文件"><span>打包预构建的二进制文件</span></a></h3><h3 id="工具需要包" tabindex="-1"><a class="header-anchor" href="#工具需要包"><span>工具需要包</span></a></h3>`,29)]))}const d=a(l,[["render",p],["__file","06.Conan创建包(二).html.vue"]]),r=JSON.parse('{"path":"/03.%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/Conan/06.Conan%E5%88%9B%E5%BB%BA%E5%8C%85(%E4%BA%8C).html","title":"Conan创建包(二)","lang":"zh-CN","frontmatter":{"title":"Conan创建包(二)","date":"2024-08-21T00:00:00.000Z","order":6,"category":["工具使用"],"tag":["Conan"],"description":"Conan创建包(二) 见官方文档。 本节介绍如何使用Conan配方创建Conan包。我们首先创建一个基本的Conan配方来打包一个简单的C++库， 可以使用conan new命令来构建该库。然后，可以在Conan配方中定义的不同方法以及可以在其中执行的操作： 使用source()方法从外部存储库检索源并对这些源应用补丁。 在方法内部向Conan包添加...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/03.%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/Conan/06.Conan%E5%88%9B%E5%BB%BA%E5%8C%85(%E4%BA%8C).html"}],["meta",{"property":"og:site_name","content":"Mr.Li"}],["meta",{"property":"og:title","content":"Conan创建包(二)"}],["meta",{"property":"og:description","content":"Conan创建包(二) 见官方文档。 本节介绍如何使用Conan配方创建Conan包。我们首先创建一个基本的Conan配方来打包一个简单的C++库， 可以使用conan new命令来构建该库。然后，可以在Conan配方中定义的不同方法以及可以在其中执行的操作： 使用source()方法从外部存储库检索源并对这些源应用补丁。 在方法内部向Conan包添加..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-30T13:53:16.000Z"}],["meta",{"property":"article:author","content":"Mr.Li"}],["meta",{"property":"article:tag","content":"Conan"}],["meta",{"property":"article:published_time","content":"2024-08-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-30T13:53:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Conan创建包(二)\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-08-21T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-30T13:53:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Li\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"创建一个 Conan 包","slug":"创建一个-conan-包","link":"#创建一个-conan-包","children":[]},{"level":2,"title":"处理包中的源","slug":"处理包中的源","link":"#处理包中的源","children":[]},{"level":2,"title":"向包中添加依赖项","slug":"向包中添加依赖项","link":"#向包中添加依赖项","children":[]},{"level":2,"title":"准备构建","slug":"准备构建","link":"#准备构建","children":[]},{"level":2,"title":"配置配方中的设置和选项","slug":"配置配方中的设置和选项","link":"#配置配方中的设置和选项","children":[]},{"level":2,"title":"构建包：build()方法","slug":"构建包-build-方法","link":"#构建包-build-方法","children":[]},{"level":2,"title":"包文件：package()方法","slug":"包文件-package-方法","link":"#包文件-package-方法","children":[]},{"level":2,"title":"为调用者定义信息：package_info()方法","slug":"为调用者定义信息-package-info-方法","link":"#为调用者定义信息-package-info-方法","children":[]},{"level":2,"title":"测试Conan包","slug":"测试conan包","link":"#测试conan包","children":[]},{"level":2,"title":"其他类型的包","slug":"其他类型的包","link":"#其他类型的包","children":[{"level":3,"title":"仅标头的包","slug":"仅标头的包","link":"#仅标头的包","children":[]},{"level":3,"title":"打包预构建的二进制文件","slug":"打包预构建的二进制文件","link":"#打包预构建的二进制文件","children":[]},{"level":3,"title":"工具需要包","slug":"工具需要包","link":"#工具需要包","children":[]}]}],"git":{"createdTime":1726728859000,"updatedTime":1732974796000,"contributors":[{"name":"lyw","email":"806555632@qq.com","commits":2}]},"readingTime":{"minutes":3.08,"words":923},"filePathRelative":"03.工具使用/Conan/06.Conan创建包(二).md","localizedDate":"2024年8月21日","excerpt":"\\n<p>见<a href=\\"https://docs.conan.io/2/tutorial/creating_packages.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">官方文档</a>。</p>\\n<p>本节介绍如何使用Conan配方创建Conan包。我们首先创建一个基本的Conan配方来打包一个简单的C++库，\\n可以使用conan new命令来构建该库。然后，可以在Conan配方中定义的不同方法以及可以在其中执行的操作：</p>\\n<ul>\\n<li>使用<code>source()</code>方法从外部存储库检索源并对这些源应用补丁。</li>\\n<li>在方法内部向Conan包添加需求<code>requirements()</code>。</li>\\n<li>使用<code>generate()</code>方法准备包构建，并定制工具链。</li>\\n<li>配置<code>configure()</code>和<code>config_options()</code>方法中的设置和选项以及它们如何影响包的二进制兼容性。</li>\\n<li>使用<code>build()</code>方法定制构建过程并启动打包的库的测试。</li>\\n<li>使用<code>package()</code>方法选择将包含在Conan包中的文件。</li>\\n<li>在方法中定义包信息<code>package_info()</code>，可以被使用。</li>\\n<li>使用<code>test_package</code>测试Conan包是否可以正确使用。</li>\\n</ul>","autoDesc":true}');export{d as comp,r as data};
